@page "/"
@using System.Net.Http
@using ApiServerForTelegram.Entities.EExceptions
@using ApiServerForTelegram.Entities.IikoCloudApi.General.Menu.RetrieveExternalMenuByID
@using Newtonsoft.Json
@using System.Net
@using System.Text
@using TlgWebAppNet
@using WebAppAssembly.Client.Entities
@using WebAppAssembly.Shared.Entities.EMenu
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using WebAppAssembly.Shared.Entities.CreateDelivery
@using WebAppAssembly.Shared.Entities.Exceptions
@using WebAppAssembly.Shared.Entities.IikoCloudApi
@using WebAppAssembly.Shared.Entities.Telegram
@using WebAppAssembly.Shared.Entities.WebApp
@using WebAppAssembly.Shared.Models
@using WebAppAssembly.Shared.Models.Order
@using WebAppAssembly.Shared.Entities
@using Product = WebAppAssembly.Shared.Entities.EMenu.Product
@using WebAppAssembly.Shared.Models.Order.Service
@inject IJSRuntime JsRuntime
@inject HttpClient Http

<PageTitle>Index</PageTitle>

@*Page for orders*@
@if (FirstRender)
{
    if (OrderModel is null || WebAppInfo is null || HaveErrors)
    {
        <div>
            <center>
                <h6>Happened something wrong:(</h6>
            </center>
        </div>
    }
    else if (RazorOrderInfo.PageType == PageType.OrderPage)
    {
        // Show the page for selecting products
        if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderSelect)
        {
            var groups = WebAppInfo.ItemCategories;
            if (groups is not null && groups.Any())
            {
                <h1 style="padding-top: 5px;margin-bottom: 0px;text-align: center;">
                    Категории
                </h1>
                <hr style="color:grey;margin-bottom:0px;margin-top:10px;"/>
                <div class="horizontal_slider" style="padding-left: 0px;padding-right: 0px;padding-top:5px;margin-top: 0px;padding-bottom:10px;">
                    <div class="slider_container">
                        @foreach (var group in groups)
                        {
                            <div class="item">
                                <div class="row">
                                    <img class="img-fluid rounded" src="@group.ButtonImageUrl" alt="@group.Name" @onclick="(e => AddCurrentGroupId(group.Id))"/>
                                </div>
                                <div class="row">
                                    <h6 style="text-align:center;">@group.Name</h6>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            var products = (CurrentGroupId == Guid.Empty ? WebAppInfo.TransportItemDtos : GetListOfProductsByGroupId(CurrentGroupId))?.ToArray();
            if (CurrentGroupId != Guid.Empty)
            {
                <h1 style="padding-top: 0px;margin-bottom: 0px;text-align:center;">
                    @groups?.FirstOrDefault(x => x.Id == CurrentGroupId)?.Name
                </h1>
            }
            else
            {
                <h1 style="padding-top: 0px;margin-bottom: 0px;text-align:center;">
                    Меню
                </h1>
            }
            <hr style="color:grey;"/>

            if (products != null && products.Any())
            {
                int columnAmount = 3;
                int productCount = products.Count();

                for (int i = 0; i < productCount; i += columnAmount)
                {
                    <div>
                        <div class="row mt-1 mb-1">
                        @for (int j = i; j < i + columnAmount; j++)
                        {
                            if (j < productCount)
                            {
                                var product = products[j];

                                <div class="col">
                                    <center>
                                        <img class="img-fluid rounded" src="@product.ImageLink()" alt="@product.Name"
                                            @onclick="(e => (product.HaveModifiers() || product.HaveSizesMoreThanOne())
                                            ? AddProductInMainMenuAsync(product.ItemId ?? Guid.Empty) : AddProductForOtherMenuAsync(product.ItemId ?? Guid.Empty))"/>
                                    </center>
                                    <h6 style="line-height:0.5;margin-top: 5px;">@($"₽{(product.Price().ToString() ?? "?")}")</h6>
                                    <p style="line-height:1;" id="@product.ItemId">@product.Name</p>
                                        <p style="line-height:0.5;color:lightgrey;margin-top:0px;" id="@product.ItemId">@(product.WeightAsString()) г</p>
                                </div>
                            }
                            else
                            {
                                <div class="col"></div>
                            }
                        }
                        </div>

                        <div class="row mb-3">
                            @for (int j = i; j < i + columnAmount; j++)
                            {
                                if (j < productCount)
                                {
                                    var product = products[j];
                                    <div class="col">
                                        @if (!product.HaveItems())
                                        {
                                            <div class="TlBlr_div TlBlrCounter_x TlBlrDesktopProductCard_footer TlBlrCounter_y">
                                                <button @onclick="(e => AddProductInMainMenuAsync(product.ItemId ?? Guid.Empty))" class="TlBlrCounter_btn TlBlrCounter_onlyIncrement"
                    data-testid="amount-select-increment">
                                                    <span>Добавить</span>
                                                </button>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="TlBlr_div TlBlrCounter_x TlBlrDesctopProductCard TlBlrCounter_y">
                                                <button @onclick="(e => (product.HaveModifiers() || product.HaveSizesMoreThanOne())
                                                    ? ChangeProductsWithModifiersForChangingMenuAsync(product.ItemId ?? Guid.Empty)
                                                    : RemoveProductInMainMenuAsync(product.ItemId ?? Guid.Empty))" class="TlBlrCounter_btn TlBlrCounter_decrement"
                    data-testid="amount-select-decrement">
                                                    <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M6 12a1 1 0 0 0 1 1h10a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" fill="currentColor"></path>
                                                    </svg>
                                                </button>
                                                <span>@product.TotalAmount</span>
                                                <button @onclick="(e => AddProductInMainMenuAsync(product.ItemId ?? Guid.Empty))" class="TlBlrCounter_btn TlBlrCounter_increment"
                    data-testid="amount-select-increment">
                                                    <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                        fill="currentColor"></path>
                                                    </svg>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="col"></div>
                                }
                            }
                        </div>                
                    </div>
                }
            }

            if (IsTestMode)
            {
                if (OrderModel.HaveSelectedProducts())
                {
                    <div>
                        <center>
        @*Show button if at least one product is selected*@
                            <a href="#" @onclick="(e => ViewOrder())" data-toggle="modal" data-target="#productModal" class="btn btn-success">Корзина</a>
                        </center>
                    </div>
                }
            }
        }
        // Show the page for to select modifiers for the selected product
        else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderProductWithModifiersSelect)
        {
            var item = ItemById(SelectedProductId, ProductPositionId);
            var product = ProductById(SelectedProductId);

            <div class="container">
            @if (IsTestMode)
            {
                <div align="right">
                    <button @onclick="(e => CancelSelectModifiersAsync(SelectedProductId, ProductPositionId))" 
        data-toggle="modal" data-target="#productModal" class="btn btn-link btn-sm btn-text-green">Отмена</button>
                </div>
            }
            <div align="center">
                <img class="img-thumbnail" style="margin-top:5px;margin-bottom:5px;" src="@product.ImageLink()"
        alt="@product.Name" />
            </div>

            <h5>@product.Name</h5> <h6 style="color:lightgrey;">@(product.WeightAsString()) г</h6>
            <div class="row">
                <div class="col">
                    <h5>В 100 граммах</h5>
                        <p>@(product.EnergyAsString()) Ккал · @(product.CarbsAsString()) Углеводы</p>
                </div>
                <div class="col">
                    <div class="TlBlr_div TlBlrCounter_x TlBlrDesctopProductCard TlBlrCounter_y" style="height:48px;">
                        <button @onclick="(e => RemoveProductInModifierMenuAsync(product.ItemId ?? Guid.Empty, ProductPositionId))" class="TlBlrCounter_btn TlBlrCounter_decrement"
        data-testid="amount-select-decrement">
                            <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M6 12a1 1 0 0 0 1 1h10a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" fill="currentColor"></path>
                            </svg>
                        </button>
                        <span>@item.Amount</span>
                        <button @onclick="(e => AddProductInModifierMenuAsync(product.ItemId ?? Guid.Empty, ProductPositionId))" class="TlBlrCounter_btn TlBlrCounter_increment"
        data-testid="amount-select-increment">
                            <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                fill="currentColor"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(product.Description))
            {
                <h4>Описание</h4>
                <p>@product.Description</p>
            }

            @if (product.HaveSizesMoreThanOne())
            {
                <div style="padding-bottom: 3px;">
                    <h5>Размеры</h5>
                    @{
                        bool isFirst = true;
                    }
                    @foreach (var size in product.ItemSizes!)
                    {
                        <div class="form-check form-check-inline">
                            @if (isFirst)
                            {
                                <input class="form-check-input" type="radio" name="inlineRadioOptions" style="box-shadow:none;"
                                id="@size.SizeId" value="@size.SizeId" @onchange="OnChangingProductSizeAsync" checked>
                                isFirst = false;
                            }
                            else
                            {
                                <input class="form-check-input" type="radio" name="inlineRadioOptions" style="box-shadow:none;"
                                id="@size.SizeId" value="@size.SizeId" @onchange="OnChangingProductSizeAsync">
                            }
                            <label class="form-check-label" for="inlineRadio1">@size.SizeName</label>
                        </div>
                    }
                </div>
            }

            @{
                var modifierGroups = product.ModifierGroups();
            }
            @if (modifierGroups is not null)
            {
                foreach (var groupModifier in modifierGroups)
                {
                    <div class="row">
                        @{
                            var groupInfo = item.SimpleGroupModifiers?.FirstOrDefault(x => x.Id == groupModifier.ItemGroupId);
                        }
                        <h5>@(groupInfo is not null ? groupInfo.Name : "#UnknownGroupName")</h5>
                    </div>
                    @if (groupModifier.Items is not null)
                    {
                        foreach (var modifier in groupModifier.Items)
                        {
                            <div class="row mb-1">
                                <div class="col-5">

                                    @if (!item.IsSelectedModifier(modifier.ItemId ?? Guid.Empty, groupModifier.ItemGroupId))
                                    {
                                        <div class="TlBlr_div TlBlrCounter_x TlBlrDesktopProductCard_footer TlBlrCounter_y">
                                            @if (!item.IsReachedMaxAmountOfGroupModifier(groupModifier.ItemGroupId ?? Guid.Empty, modifier.ItemId ?? Guid.Empty))
                                            {
                                                <button @onclick="(e => AddModifierAsync(SelectedProductId, modifier.ItemId ?? Guid.Empty, ProductPositionId, groupModifier.ItemGroupId))"
                                                    class="TlBlrCounter_btn TlBlrCounter_onlyIncrement" data-testid="amount-select-increment">
                                                    <span>Добавить</span>
                                                </button>
                                            }
                                            else
                                            {
                                                <button data-testid="amount-select-increment" class="TlBlrCounter_btn TlBlrCounter_onlyIncrement" disabled>
                                                    <span>Добавить</span>
                                                </button>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="TlBlr_div TlBlrCounter_x TlBlrDesctopProductCard TlBlrCounter_y">
                                            <button @onclick="(e => RemoveModifierAsync(SelectedProductId, modifier.ItemId ?? Guid.Empty, ProductPositionId, groupModifier.ItemGroupId))"
                                                class="TlBlrCounter_btn TlBlrCounter_decrement" data-testid="amount-select-decrement">
                                                <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M6 12a1 1 0 0 0 1 1h10a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" fill="currentColor"></path>
                                                </svg>
                                            </button>
                                            
                                            @if (!item.IsReachedMaxAmountOfGroupModifier(groupModifier.ItemGroupId ?? Guid.Empty, modifier.ItemId ?? Guid.Empty))
                                            {
                                                <span>@(item.AmountOfModifier(modifier.ItemId ?? Guid.Empty, groupModifier.ItemGroupId))</span>
                                                <button @onclick="(e => AddModifierAsync(SelectedProductId, modifier.ItemId ?? Guid.Empty, ProductPositionId, groupModifier.ItemGroupId))"
                                                class="TlBlrCounter_btn TlBlrCounter_increment" data-testid="amount-select-increment">
                                                    <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                                fill="currentColor"></path>
                                                    </svg>
                                                </button>
                                            }
                                            else
                                            {
                                                <span style="color:red;">@(item.AmountOfModifier(modifier.ItemId ?? Guid.Empty, groupModifier.ItemGroupId))</span>
                                                    <button data-testid="amount-select-increment" class="TlBlrCounter_btn TlBlrCounter_increment" disabled>
                                                    <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                                fill="currentColor"></path>
                                                    </svg>
                                                </button>  
                                            }
                                        </div>
                                    }


                                </div>

                                <div class="col">
                                    @{
                                        var modifierD = item.Modifiers?.FirstOrDefault(x => x.ProductId == modifier.ItemId);
                                    }
                                    <p>@modifierD?.Name</p>
                                    </div>
                                    <div align="right" class="col">
                                    @{
                                        var price = modifier.Price();
                                    }
                                    <p>@(price == 0 ? "Бесплатно" : $"₽{price}")</p>
                                </div>
                            </div>
                        }
                    }
                }
            }

            @if (IsTestMode)
            {
                <br />
                <div>
                    @if (item.IsReachedMinAmountOfGroupModifiers() && item.IsReachedMinAmountOfModifiers())
                    {
                        <button @onclick="(e => CompleteSelectModifiers())" id="@SelectedProductId" data-toggle="modal" data-target="#productModal"
                            class="btn btn-success w-100">Добавить ₽@(TotalSumOfSelectedProductWithModifiers(SelectedProductId, ProductPositionId))</button>
                    }
                    else
                    {
                        <button @onclick="(e => CompleteSelectModifiers())" id="@SelectedProductId" data-toggle="modal" data-target="#productModal"
                            class="btn btn-success w-100" disabled>Добавить ₽@(TotalSumOfSelectedProductWithModifiers(SelectedProductId, ProductPositionId))</button>
                    }
                </div>
            }
        </div>
        }
        // Show the page to add products
        else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderProductSelect)
        {
            var item = ItemById(SelectedProductId);
            var product = ProductById(SelectedProductId);

            <div class="container">
                @if (IsTestMode)
                {
                    <div align="right">
                        <button @onclick="(e => CancelSelectedProduct(SelectedProductId))" 
            data-toggle="modal" data-target="#productModal" class="btn btn-link btn-sm btn-text-green">Отмена</button>
                    </div>
                }
                <div align="center">
                    <img class="img-thumbnail" style="margin-top:5px;margin-bottom:5px;" src="@product.ImageLink()"
            alt="@product.Name" />
                </div>

                <h5>@product.Name</h5> <h6 style="color:lightgrey;">@(product.WeightAsString()) г</h6>
                <div class="row">
                    <div class="col">
                        <h5>В 100 граммах</h5>
                        <p>@(product.EnergyAsString()) Ккал · @(product.CarbsAsString()) Углеводы</p>
                    </div>
                    <div class="col">
                        <div class="TlBlr_div TlBlrCounter_x TlBlrDesctopProductCard TlBlrCounter_y" style="height:48px;">
                            <button @onclick="(e => RemoveProductInOtherMenuAsync(product.ItemId ?? Guid.Empty))" class="TlBlrCounter_btn TlBlrCounter_decrement"
            data-testid="amount-select-decrement">
                                <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M6 12a1 1 0 0 0 1 1h10a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" fill="currentColor"></path>
                                </svg>
                            </button>
                            <span>@item.Amount</span>
                            <button @onclick="(e => AddProductInOtherMenuAsync(product.ItemId ?? Guid.Empty))" class="TlBlrCounter_btn TlBlrCounter_increment"
            data-testid="amount-select-increment">
                                <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                    fill="currentColor"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>     

                @if (!string.IsNullOrEmpty(product.Description))
                {
                    <h4>Описание</h4>
                    <p>@product.Description</p>
                }

                @if (IsTestMode)
                {
                    <br />
                    <div>
                        <button @onclick="(e => CompleteSelectedProducts())" id="@SelectedProductId" data-toggle="modal" data-target="#productModal"
            class="btn btn-success w-100">Добавить</button>
                    </div>
                }
            </div>
        }
        // Show the page to remove selected products with modifiers
        else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderProductWithModifiersRemove)
        {
            bool hr = false;
            var items = OrderModel.Items?.Where(item => item.ProductId == SelectedProductId);
            var product = WebAppInfo.ProductById(CurrentGroupId, SelectedProductId);
            double totalSumOfSelectedProducts = 0;
            <br />

            @if (items is not null && product is not null)
            {
                foreach (var item in items)
                {
                    if (hr)
                    {
                        <hr style="color:lightgrey;" />
                    }
                    else
                    {
                        hr = true;
                    }

                    <div class="row">
                        <div class="col">
                            <img class="img-fluid rounded" src="@ImageLinkByProductId(item.ProductId)" alt="@item.ProductName" />
                        </div>
                        <div class="col-6">
                            @{
                                var sizeName = item.ProductSizeId is not null ? product!.ItemSizes?.FirstOrDefault(x => x.SizeId == item.ProductSizeId)?.SizeName
                                    : product!.HaveSizesMoreThanOne() ? product.ItemSizes?.FirstOrDefault()?.SizeName : null;
                            }
                            <p>@item.ProductName @sizeName</p>
                            @foreach (var modifier in item.SelectedModifiers())
                            {
                                <p> • @modifier.Name x@(modifier.Amount)</p>
                            }
                            <div style="display: flex;">
                                <button @onclick="(e => RemoveProductWithModifiersInChangingMenuAsync(item.ProductId, item.PositionId ?? Guid.Empty))"
                                    data-toggle="modal" data-target="#productModal" class="btn btn-light" style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                    -
                                </button>
                                <p style="padding-left:10px;padding-right:10px;margin-bottom:0;margin-top:3%;">@(item.Amount) шт</p>
                                <button @onclick="(e => AddProductWithModifiersInChangingMenuAsync(item.ProductId, item.PositionId ?? Guid.Empty))"
                                    data-toggle="modal" data-target="#productModal" class="btn btn-light" style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                    +
                                </button>
                            </div>
                        </div>
                        <div align="right" class="col-2">
                            @{    
                                var totalSum = product is not null ? TotalSumOfSelectedProductWithModifiers(product, item)
                                : TotalSumOfSelectedProductWithModifiers(item.ProductId, item.PositionId ?? Guid.Empty);
                                totalSumOfSelectedProducts += totalSum;
                                    
                            }
                            <p>₽@totalSum</p>
                        </div>
                    </div>
                }
            }
        <h5 align="right" style="margin-top:20px;margin-bottom:5px;">Итого: ₽@totalSumOfSelectedProducts</h5>

        <br />
        <center>
            <button @onclick="(e => RemoveSelectedProductsWithMofifiersByIdAsync(SelectedProductId))" style="background-color:rgba(28,28,28,0);outline:none;border:0;width:42px;height:32px;">
                <svg xmlns="http://www.w3.org/2000/svg" class="Trash" viewBox="0 0 16 18.286" width="16" height="18.286">
                    <path d="M1.143 16.571a1.714 1.714 0 0 0 1.714 1.714h10.286a1.714 1.714 0 0 0 1.714 -1.714V4.571H1.143zm9.714 -9.143a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zM15.429 1.143H11.143l-0.336 -0.668A0.857 0.857 0 0 0 10.039 0H5.957a0.847 0.847 0 0 0 -0.764 0.475L4.857 1.143H0.571A0.571 0.571 0 0 0 0 1.714v1.143a0.571 0.571 0 0 0 0.571 0.571h14.857a0.571 0.571 0 0 0 0.571 -0.571V1.714a0.571 0.571 0 0 0 -0.571 -0.571z"></path>
                </svg>
            </button>
        </center>
        }
        // Show the page for view and check selected products in the order
        else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderView)
        {   
            <div class="container-fluid">
                @if (IsTestMode)
                {
                    <div class="row mt-1 mb-2">
                        <div class="col">
                            <h1>Ваш заказ</h1>
                        </div>
                        <div align="right" class="col" style="padding-right:0px;padding-left:0px;">
            @*Show the button for to edit the created order if the page isn't going to open in the Telegram app*@
                            <button style="background-color:rgba(28,28,28,0);outline:none;border:0;width:42px;height:32px;">
                                <svg xmlns="http://www.w3.org/2000/svg" class="Trash" viewBox="0 0 16 18.286" width="16" height="18.286">
                                    <path d="M1.143 16.571a1.714 1.714 0 0 0 1.714 1.714h10.286a1.714 1.714 0 0 0 1.714 -1.714V4.571H1.143zm9.714 -9.143a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zM15.429 1.143H11.143l-0.336 -0.668A0.857 0.857 0 0 0 10.039 0H5.957a0.847 0.847 0 0 0 -0.764 0.475L4.857 1.143H0.571A0.571 0.571 0 0 0 0 1.714v1.143a0.571 0.571 0 0 0 0.571 0.571h14.857a0.571 0.571 0 0 0 0.571 -0.571V1.714a0.571 0.571 0 0 0 -0.571 -0.571z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row mt-1 mb-2">
                        <div class="col">
                            <h1>Ваш заказ</h1>
                        </div>
                        <div align="right" class="col" style="padding-right:0px;padding-left:0px;">
            @*Show the button for to edit the created order if the page isn't going to open in the Telegram app*@
                            <button @onclick="(e => RemoveAllSelectedProductsInShoppingCartAsync())" style="background-color:rgba(28,28,28,0);outline:none;border:0;width:42px;height:32px;">
                                <svg xmlns="http://www.w3.org/2000/svg" class="Trash" viewBox="0 0 16 18.286" width="16" height="18.286">
                                    <path d="M1.143 16.571a1.714 1.714 0 0 0 1.714 1.714h10.286a1.714 1.714 0 0 0 1.714 -1.714V4.571H1.143zm9.714 -9.143a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zM15.429 1.143H11.143l-0.336 -0.668A0.857 0.857 0 0 0 10.039 0H5.957a0.847 0.847 0 0 0 -0.764 0.475L4.857 1.143H0.571A0.571 0.571 0 0 0 0 1.714v1.143a0.571 0.571 0 0 0 0.571 0.571h14.857a0.571 0.571 0 0 0 0.571 -0.571V1.714a0.571 0.571 0 0 0 -0.571 -0.571z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                }

                @{
                    bool hr = false;
                }

                @*Get the selected products in the order
                    Output all selected products*@
                @if (OrderModel.Items is not null)
                {
                    foreach (var item in OrderModel.Items)
                    {
                        var product = WebAppInfo.ProductById(item.ProductId);
                        if (product is null)
                        {
                            continue;
                        }

                        if (hr)
                        {
                            <hr style="color:lightgrey;" />
                        }
                        else
                        {
                            hr = true;
                        }
                        var sizeName = item.ProductSizeId is not null ? product.ItemSizes?.FirstOrDefault(x => x.SizeId == item.ProductSizeId)?.SizeName
                        : product.HaveSizesMoreThanOne() ? product.ItemSizes?.FirstOrDefault()?.SizeName : null;
                        if (item.HaveModifiers())
                        {
                            <div class="row">
                                <div class="col">
                                    <img class="img-fluid rounded" src="@ImageLinkByProductId(item.ProductId)" alt="@item.ProductName" />
                                </div>
                                <div class="col-6">
                                    <p>@item.ProductName @sizeName</p>
                                    @foreach (var modifier in item.SelectedModifiers())
                                    {
                                        <p> • @modifier.Name x@(modifier.Amount)</p>
                                    }
                                    <div style="display: flex;">
                                        <button @onclick="(e => RemoveProductInShoppingCartAsync(item.ProductId, item.PositionId))" data-toggle="modal" data-target="#productModal" class="btn btn-light"
    style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                            -
                                        </button>
                                        <p style="padding-left:10px;padding-right:10px;margin-bottom:0;margin-top:3%;">@(item.Amount) шт</p>
                                        <button @onclick="(e => AddProductInShoppingCartAsync(item.ProductId, item.PositionId))" data-toggle="modal" data-target="#productModal" class="btn btn-light"
    style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                            +
                                        </button>
                                    </div>
                                </div>

                                <div align="right" class="col-2">
                                    @{
                                        var totalSum = product != null ? TotalSumOfSelectedProductWithModifiers(product, item)
                                        : TotalSumOfSelectedProductWithModifiers(item.ProductId, item.PositionId ?? Guid.Empty);
                                        var freeItems = OrderModel?.FreePriceItems?.Where(id => id == item.PositionId);
                                    }
                                    @if (freeItems != null && freeItems.Any())
                                    {
                                        double discountSum = 0;
                                        foreach (var freeItem in freeItems)
                                        {
                                            discountSum += item.Price ?? 0;
                                        }
                                        <del>₽@totalSum</del>
                                        <p>₽@(totalSum - discountSum)</p>
                                    }
                                    else
                                    {
                                        <p>₽@totalSum</p>
                                    }

                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col">
                                    <img class="img-fluid rounded" src="@ImageLinkByProductId(item.ProductId)" alt="@item.ProductName" />
                                </div>
                                <div class="col-6">
                                    <p>@item.ProductName @sizeName</p>
                                    <div style="display: flex;">
                                        <button @onclick="(e => RemoveProductInShoppingCartAsync(item.ProductId, item.PositionId))" data-toggle="modal" data-target="#productModal" class="btn btn-light"
                                            style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                            -
                                        </button>
                                        <p style="padding-left:10px;padding-right:10px;margin-bottom:0;margin-top:3%;">@(item.Amount) шт</p>
                                        <button @onclick="(e => AddProductInShoppingCartAsync(item.ProductId, item.PositionId))" data-toggle="modal" data-target="#productModal" class="btn btn-light"
                                            style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                            +
                                        </button>
                                    </div>
                                </div>

                                <div align="right" class="col-2">
                                    @{
                                        var freeItems = OrderModel?.FreePriceItems?.Where(id => id == item.PositionId);
                                    }

                                    @if (freeItems != null && freeItems.Any())
                                    {
                                        double discountSum = 0;
                                        foreach (var freeItem in freeItems)
                                        {
                                            discountSum += item.Price ?? 0;
                                        }
                                        <del>₽@(item.Price * item.Amount)</del>
                                        <p>₽@(item.Price * item.Amount - discountSum)</p>
                                    }
                                    else
                                    {
                                        <p>₽@(item.Price * item.Amount)</p>
                                    }
                                </div>
                            </div>
                        }
                    }
                }
                @if (OrderModel.FreeItems != null)
                {
                    foreach (var item in OrderModel.FreeItems)
                    {
                        <hr style="color:lightgrey;" />
                        <div class="row">
                            <div class="col">
                                <img class="img-fluid rounded" src="@ImageLinkByProductId(item.ProductId)" alt="@item.ProductName" />
                            </div>
                            <div class="col-6">
                                <p>@item.ProductName</p>
                            </div>
                            <div align="right" class="col-2">
                                <p>🎁</p>
                            </div>
                        </div>
                    }
                }

            </div>
            <br />

            @if (OrderModel.DiscountSum > 0)
            {

                var discountProcent = OrderModel.DiscountProcent;
                bool isInteger = (int)(discountProcent * 100 % 100) == 0;
                <h5 style="margin-top:5px;">Скидка: -@string.Format(isInteger ? "{0:F0}" : "{0:F2}", OrderModel.DiscountProcent)%</h5>

                <div class="row mb-2">
                    <div class="col">
                        <h5>Итого:</h5>
                    </div>
                    <div class="col" style="flex:0 0 auto;width:80%;">
                        <h6 align="left" style="padding-top:5px;"><del>₽@OrderModel.TotalSum</del></h6>
                        <h6 align="left">₽@(OrderModel.FinalSum)</h6>
                    </div>
                </div>
            }
            @if (WebAppInfo.UseCoupon)
            {
                <div class="row" style="padding-bottom:5px;">
                        <div class="col">
                        <input class="comment" type="text" name="Coupon" placeholder="Введите промокод" @bind="@CouponValue" />
                    </div>
                    <div class="col">
                        <button @onclick="CalculateDiscountProgramByCouponAsync" class="btn btn-light TlBlrCouponApply" style="box-shadow:none;background-color:#F5F4F2;height:100%;">
                            <span>Применить</span>
                        </button>
                    </div>
                </div>
            }

            if (OrderModel.BonusSum > 0)
            {
                <h5>Бонусные баллы</h5>
                <h6>У Вас накоплено @(OrderModel.BonusSum) баллов</h6>
                <div class="row">
                    <div class="col-6" style="position:relative;">
                        <input type="range" class="form-range" style="margin:0;position:absolute;top:50%;left:50%;margin-right:-50%;transform:translate(-50%,-50%);
padding-left:10px;padding-right:10px;"
                        min="0" max="@(OrderModel.AllowedBonusSum)" id="customRangeForWalletBalance" value="@OrderModel.SelectedBonusSum"
                            @oninput="OnChangeAllowedBonusSum">
                    </div>
                    <div class="col-2" style="position:relative;">
                        <h5 style="margin:0;position:absolute;top:50%;left:50%;margin-right:-50%;transform:translate(-50%,-50%);">@(OrderModel.SelectedBonusSum)</h5>
                    </div>
                    <div class="col-4">
                        @if (!ConfirmDiscountBonus)
                        {
                            <button @onclick="(e => ConfirmDiscountBonus = true)" class="btn btn-light TlBlrCouponApply" style="box-shadow:none;background-color:#F5F4F2;height:100%;">
                                <span>Применить</span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-light TlBlrCouponApply" style="box-shadow:none;background-color:#F5F4F2;height:100%;" disabled>
                                <span>Применено</span>
                            </button>
                        }
                    </div>
                </div>
            }

            <div>
                <h5>Способ доставки</h5>
            </div>
            @if (OrderModel.ByCourier)
            {
                <div class="btn-group" role="group" aria-label="Delivery type">
                    <button type="button" @onclick="(e => ChangeDeliveryTypeFlagAsync(true))" data-toggle="modal" data-target="#productModal" class="btn btn-success disabled">Доставка</button>
                    <button type="button" @onclick="(e => ChangeDeliveryTypeFlagAsync(false))" data-toggle="modal" data-target="#productModal" class="btn btn-secondary"
                        style="background-color:#c2c9cf;border-color: #c2c9cf;">Самовывоз</button>
                </div>
                <input class="comment" type="text" name="City" placeholder="Город" value="@CityValue" @oninput="(e => { var res = e.Value.ToString(); CityValue = res is null ? CityValue : res; })"/>
                <input class="comment" type="text" name="Street" placeholder="Улица" value="@StreetValue"
                @oninput="(e => { var res = e.Value.ToString(); StreetValue = res is null ? StreetValue : res; })" />
                <div style="display: flex;">
                    <input class="comment" style="width:49%;" type="text" name="House" placeholder="Дом" value="@HouseValue"
                    @oninput="(e => { var res = e.Value.ToString(); HouseValue = res is null ? HouseValue : res; })" />
                    <input class="comment" style="width:49%;margin-left:auto;margin-right:0em;" type="text" name="Flat" placeholder="Квартира" value="@FlatValue"
                    @oninput="(e => { var res = e.Value.ToString(); FlatValue = res is null ? FlatValue : res; })" />
                </div>
                <div style="display: flex;">
                    <input class="comment" style="width:49%;" type="text" name="Entrance" placeholder="Подъезд" value="@EntranceValue"
                    @oninput="(e => { var res = e.Value.ToString(); EntranceValue = res is null ? EntranceValue : res; })"/>
                    <input class="comment" style="width:49%;margin-left:auto;margin-right:0em;" type="text" name="Floor" placeholder="Этаж" value="@FloorValue"
                    @oninput="(e => { var res = e.Value.ToString(); FloorValue = res is null ? FloorValue : res; })" />
                </div>
            }
            else
            {
                <div class="btn-group" role="group" aria-label="Delivery type">
                    <button @onclick="(e => ChangeDeliveryTypeFlagAsync(true))" data-toggle="modal" data-target="#productModal" class="btn btn-secondary"
                        style="background-color:#c2c9cf;border-color: #c2c9cf;">
                        Доставка
                    </button>
                    <button @onclick="(e => ChangeDeliveryTypeFlagAsync(false))" data-toggle="modal" data-target="#productModal" class="btn btn-success disabled">Самовывоз</button>
                </div>
                <div style="margin-top:10px;">
                    <select class="form-select" style="box-shadow:none;" aria-label="Default select example" @onchange="@OnSelectTerminal">
                    @{
                        var delTerminal = OrderModel.DeliveryTerminal;
                    }
                    @if (delTerminal != null)
                    {
                        <option id="@delTerminal.Id" selected>@(delTerminal.Name)</option>
                    }
                    else if (OrderModel.TerminalId != null && OrderModel.TerminalId != Guid.Empty)
                    {
                        delTerminal = DeliveryTerminals?.FirstOrDefault(x => x.Id == OrderModel.TerminalId);
                        if (delTerminal != null)
                        {
                            <option id="@delTerminal.Id" selected>@(delTerminal.Name)</option>
                        }
                        else
                        {
                            <option selected>Выберите улицу</option>
                        }
                    }
                    else
                    {
                        <option selected>Выберите улицу</option>
                    }
                    @if (DeliveryTerminals is not null)
                    {
                        foreach (var terminal in DeliveryTerminals)
                        {
                            <option value="@terminal.Id">@terminal.Name</option>
                        }
                    }
                    </select>
                </div>
            }

            @*Comment field*@
            <input class="comment" type="text" name="Comment" placeholder="Ваш комментарий..." @bind="@CommentValue"/>

            <div>
                <br/>
                @if (IsTestMode)
                {
                    <central>
                        @*The button for to pay the created order if the page isn't going to open in the Telegram app*@
                        @if (OrderModel.TotalSum < 70)
                        {
                            <button data-toggle="modal" data-target="#productModal" class="btn btn-success" disabled>Pay ₽@(OrderModel.TotalSum)</button>
                        }
                        else
                        {
                            var sum = OrderModel.TotalSum - OrderModel.DiscountSum;
                            <button @onclick="(e => PayOrder())" data-toggle="modal" data-target="#productModal" class="btn btn-success">Оплатить ₽@(sum)</button>
                        }
                    </central>
                }
            </div>
        }
        // Page to show information about the created order
        else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderCreated && IsTestMode)
        {
            <p>@InfoAboutCreatedOrder()</p>
        }
    }
}
else {
    <div class=container4>
        <div class="dots-bars-2"></div>
    </div>
}

@code {
    #region

    //
    private OrderService? OrderService { get; set; }
    //
    private ITwaNet? TwaNet { get; set; }
    //
    private StateOfPage? StateOfPage { get; set; }
    //
    private long TestChatId { get; } = 0;


    //
    protected override async Task OnInitializedAsync()
    {
        StateOfPage = new StateOfPage();

        try
        {
            TwaNet = new TwaNet(JsRuntime);
            var chatId = TwaNet.GetChatId();
            OrderService = new OrderService(Http, chatId, OrderControllerPaths.RetrieveMainInfoForWebAppOrder);

            // !!! Initialize and run it block after render page !!!
            StateHasChanged();
            if (OrderService.OrderInfo.HaveSelectedProducts())
            {
                var btnText = OrderService.DeliveryGeneralInfo.CurrTlgWebAppBtnTxt?.SelectingProducts ?? throw new InfoException(typeof(Index).FullName!,
                    nameof(Exception), typeof(CurrTlgWebAppBtnTxt).FullName!, ExceptionType.Null);
                await TwaNet.SetMainButtonTextAsync(btnText);
            }
            await ListenTlgMainButtonAsync();
        }
        catch (Exception ex)
        {
            // !!! Check error message for test chat ID !!!
            Console.WriteLine(ex.Message);
            StateOfPage.SetErrorStateForWebApp();
        }
    }

    // Select group
    private async Task AddCurrentGroupId(Guid id)
    {
        if (StateOfPage!.IsPageBlocked) return;

        try
        {
            OrderService!.CurrentGroupId = id;
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            StateOfPage.SetErrorStateForWebApp();
        }
    }

    // 
    public IEnumerable<TransportItemDto>? GetListOfProductsByGroupId(Guid id)
    {
        if (WebAppInfo?.ItemCategories is null)
        {
            HaveErrors = true;
            throw new Exception("!!!");
        }

        var productsByGroup = WebAppInfo.ItemCategories?.FirstOrDefault(x => x.Id == id)?.Items;
        return productsByGroup;
    }

    // Add new item to order with position id
    private Guid AddItemToOrderWithNewPosition(Guid productId, TransportItemDto? product = null)
    {
        if (OrderModel is null) throw new Exception($"{typeof(Index).FullName}.{nameof(AddItemToOrderWithNewPosition)}.{nameof(Exception)}: " +
            $"{nameof(OrderModel)} can't be null");

        var newId = Guid.NewGuid();
        product ??= WebAppInfo?.TransportItemDtos?.FirstOrDefault(x => x.ItemId == productId);
        if (product is not null && OrderModel.Items is not null)
        {
            OrderModel.Items.Add(new Item(product, newId));
        }
        return newId; // ???
    }

    // 
    private void AddProduct(ref TransportItemDto product, ref Item item)
    {
        Console.WriteLine(typeof(Index).FullName!, nameof(AddProduct), "Increase an amount of product");
        if (OrderModel is null) throw new Exception($"{typeof(Index).FullName}.{nameof(AddProduct)}.{nameof(Exception)}: " +
            $"{nameof(OrderModel)} can't be null");

        item.IncrementAmount();
        OrderModel.IncrementTotalAmount();
        product.IncrementAmount();
    }

    // 
    public void RemoveProduct(ref TransportItemDto product, ref Item item)
    {
        Console.WriteLine(typeof(Index).FullName!, nameof(RemoveProduct), "Decrease an amount of product");
        if (OrderModel is null) throw new Exception($"{typeof(Index).FullName}.{nameof(RemoveProduct)}.{nameof(Exception)}: " +
            $"{nameof(OrderModel)} can't be null");

        item.DecrementAmount();
        OrderModel.DecrementTotalAmount();
        product.DecrementAmount();
    }

    // 
    private double TotalSumOfSelectedProductWithModifiers(TransportItemDto product, Item item)
    {
        var productPrice = product.Price(item.ProductSizeId) ?? throw new Exception($"{typeof(Index).FullName}.{nameof(TotalSumOfSelectedProductWithModifiers)}." +
            $"{nameof(Exception)}: Price of product by ID - '{product.ItemId}' can't be null");
        return (productPrice + PriceWithModifiersByProductId(item)) * item.Amount;
    }

    // 
    private double PriceWithModifiersByProductId(Item item)
    {
        var modifiers = item.SelectedModifiers();
        double total = 0;
        foreach (var modifier in modifiers)
            total += (modifier.Price ?? throw new Exception($"{typeof(Index).FullName}.{nameof(PriceWithModifiersByProductId)}.{nameof(Exception)}: " +
                $"Price of modifier by ID - '{modifier.ProductId}' can't be null")) * modifier.Amount;
        return total;
    }

    // 
    private async Task SendChangedOrderModelToServerAsync()
    {
        try
        {
            var body = JsonConvert.SerializeObject(OrderModel);
            var data = new StringContent(body, Encoding.UTF8, "application/json");
            var response = await Http.PostAsync(OrderControllerPath + "saveChangedOrder", data);

            string responseBody = await response.Content.ReadAsStringAsync();
            if (!response.StatusCode.Equals(HttpStatusCode.OK))
                throw new HttpProcessException(response.StatusCode, responseBody);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Add product in the main menu
    private async Task AddProductInMainMenuAsync(Guid productId)
    {
        if (IsPageBlocked) return;
        try
        {
            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            var product = WebAppInfo.ProductById(CurrentGroupId, productId);
            if (product is not null)
            {
                Item item;
                var items = OrderModel?.Items ?? throw new Exception($"{nameof(OrderModel)} can't be null");

                if (product.HaveModifiers() || product.HaveSizesMoreThanOne())
                {
                    RazorOrderInfo.OrderStatusType = OrderStatusType.OrderProductWithModifiersSelect;
                    SelectedProductId = productId;
                    ProductPositionId = AddItemToOrderWithNewPosition(productId, product);
                    item = items.Last(x => x.ProductId == productId && x.PositionId == ProductPositionId);
                    if (product.HaveSizesMoreThanOne()) item.ProductSizeId = product.ItemSizes?.FirstOrDefault()?.SizeId;
                }
                else
                {
                    var itm = items.FirstOrDefault(x => x.ProductId == productId);
                    if (itm is null)
                    {
                        AddItemToOrderWithNewPosition(productId, product);
                        item = items.Last(x => x.ProductId == productId);
                    }
                    else item = itm;
                }

                AddProduct(ref product, ref item);
                if (!IsTestMode)
                {
                    await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                    await JsRuntime.InvokeVoidAsync("SetViewOrderButton");
                    if (product.HaveModifiers() || product.HaveSizesMoreThanOne())
                    {
                        await JsRuntime.InvokeVoidAsync("BackButtonShow");
                        await JsRuntime.InvokeVoidAsync("SetSelectProductWithModifiersButton", TotalSumOfSelectedProductWithModifiers(product, item));
                    }
                }
                if (!(product.HaveModifiers() || product.HaveSizesMoreThanOne())) await SendChangedOrderModelToServerAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(AddProductInMainMenuAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Remove product in the main menu
    private async Task RemoveProductInMainMenuAsync(Guid productId)
    {
        if (IsPageBlocked) return;
        try
        {
            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            var product = WebAppInfo.ProductById(CurrentGroupId, productId);
            if (product is not null)
            {
                var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                if (product.HaveModifiers() || product.HaveSizesMoreThanOne())
                {
                    product.TotalAmount = 0;
                    await CancelSelectedProductsWithModifiersAsync(productId);
                }
                else
                {
                    var item = order.Items?.FirstOrDefault(x => x.ProductId == productId);
                    if (item is null) return;
                    RemoveProduct(ref product, ref item);
                    if (!item.HaveItems()) order.ZeroAmountOfItem(item);
                }

                if (!IsTestMode)
                {
                    await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                    if (!order.HaveSelectedProducts()) await JsRuntime.InvokeVoidAsync("HideViewOrderButton");
                }
                await SendChangedOrderModelToServerAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(RemoveProductInMainMenuAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // 
    private double UpdateTotalSumOfOrder()
    {
        double total = 0;
        if (OrderModel is null) throw new Exception($"{typeof(Index).FullName}.{nameof(UpdateTotalSumOfOrder)}.{nameof(Exception)}: " +
            $"{nameof(OrderModel)} can't be null");

        var items = OrderModel.Items;
        if (items is not null)
        {
            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            foreach (var item in items)
            {
                var product = WebAppInfo.ProductById(item.ProductId) ?? throw new Exception($"{typeof(Index).FullName}.{nameof(UpdateTotalSumOfOrder)}.{nameof(Exception)}: " +
                    $"{nameof(Product)} can't be null");

                if (item.HaveModifiers()) total += TotalSumOfSelectedProductWithModifiers(product, item);
                else total += item.Amount * product.Price(item.ProductSizeId) ?? throw new Exception($"{typeof(Index).FullName}.{nameof(UpdateTotalSumOfOrder)}.{nameof(Exception)}: " +
                    $"Price of product can't be null");
            }
        }
        else total = double.MaxValue;
        return OrderModel.TotalSum = total;
    }

    // Increase an amount of product by ID in the shopping cart
    private async Task AddProductInShoppingCartAsync(Guid productId, Guid? positionId = default)
    {
        if (IsPageBlocked) return;
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(AddProductInShoppingCartAsync), "Increase an amount of product");

            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            var product = WebAppInfo.TransportItemDtos.FirstOrDefault(x => x.ItemId == productId);
            if (product is not null)
            {
                var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                var item = order.Items?.FirstOrDefault(x => x.ProductId == productId && x.PositionId == positionId);
                if (item is null) return;
                AddProduct(ref product, ref item);
                UpdateTotalSumOfOrder();
                if (!IsTestMode)
                {                 
                    await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                    if (WebAppInfo.UseIikoBizProgram)
                    {
                        var res = await CalculateLoyaltyProgramAsync();
                        CalculateAllowedBonusSum(OrderModel.BonusSum, res);
                    }
                    await JsRuntime.InvokeVoidAsync("SetPayOrderButton", WebAppInfo.UseIikoBizProgram ? OrderModel.FinalSum : OrderModel.TotalSum);
                }
                else if (WebAppInfo.UseIikoBizProgram)
                {
                    var res = await CalculateLoyaltyProgramAsync();
                    CalculateAllowedBonusSum(OrderModel.BonusSum, res);
                }
                await SendChangedOrderModelToServerAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(AddProductInShoppingCartAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Decrease an amount of product by ID in the shopping cart
    private async Task RemoveProductInShoppingCartAsync(Guid productId, Guid? positionId = default)
    {
        if (IsPageBlocked) return;
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(RemoveProductInShoppingCartAsync), "Decrease an amount of product");

            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            var product = WebAppInfo.TransportItemDtos.FirstOrDefault(x => x.ItemId == productId);
            if (product is not null)
            {
                var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                var item = order.Items?.FirstOrDefault(x => x.ProductId == productId && x.PositionId == positionId);
                if (item is null) return;
                RemoveProduct(ref product, ref item);
                if (!item.HaveItems()) OrderModel.ZeroAmountOfItem(item);
                UpdateTotalSumOfOrder();
                if (!IsTestMode)
                {
                    await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                    if (order.HaveSelectedProducts())
                    {
                        if (WebAppInfo.UseIikoBizProgram)
                        {
                            var res = await CalculateLoyaltyProgramAsync();
                            CalculateAllowedBonusSum(OrderModel.BonusSum, res);
                        }
                        await JsRuntime.InvokeVoidAsync("SetPayOrderButton", WebAppInfo.UseIikoBizProgram ? OrderModel.FinalSum
                        : OrderModel.TotalSum);
                    }
                    else
                    {
                        RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
                        await JsRuntime.InvokeVoidAsync("HideViewOrderButton");
                        await JsRuntime.InvokeVoidAsync("BackButtonHide");
                    }
                }
                else if (WebAppInfo.UseIikoBizProgram)
                {
                    var res = await CalculateLoyaltyProgramAsync();
                    CalculateAllowedBonusSum(OrderModel.BonusSum, res);
                }
                await SendChangedOrderModelToServerAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(RemoveProductInShoppingCartAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Change products with modifiers
    private async Task ChangeProductsWithModifiersForChangingMenuAsync(Guid productId)
    {
        try
        {
            var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
            var items = order.Items?.Where(x => x.ProductId == productId) ?? throw new Exception($"{nameof(Item)} can't be null");
            var len = items.Count();
            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            if (len == 1)
            {
                var product = WebAppInfo.TransportItemDtos.FirstOrDefault(x => x.ItemId == productId);
                if (product != null)
                {
                    var item = items.First();
                    RemoveProduct(ref product, ref item);
                    if (!item.HaveItems()) OrderModel.ZeroAmountOfItem(item);
                    if (!IsTestMode)
                    {
                        await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                        if (!order.HaveSelectedProducts()) await JsRuntime.InvokeVoidAsync("HideViewOrderButton");
                    }
                    await SendChangedOrderModelToServerAsync();
                }
            }
            else if (len > 1)
            {
                SelectedProductId = productId;
                RazorOrderInfo.OrderStatusType = OrderStatusType.OrderProductWithModifiersRemove;
                if (!IsTestMode)
                {
                    await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                    await JsRuntime.InvokeVoidAsync("BackButtonShow");
                    await JsRuntime.InvokeVoidAsync("SetMainButtonText", "Готово");
                }
            }
            else if (!IsTestMode) await JsRuntime.InvokeVoidAsync("SetMainButtonText", "Готово");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(ChangeProductsWithModifiersForChangingMenuAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Increase an amount of product with modifiers by ID
    private async Task AddProductWithModifiersInChangingMenuAsync(Guid productId, Guid positionId)
    {
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(AddProductInShoppingCartAsync), "Increase an amount of product");

            var product = WebAppInfo?.TransportItemDtos?.FirstOrDefault(x => x.ItemId == productId);
            if (product is not null)
            {
                var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                var item = order.Items?.FirstOrDefault(x => x.ProductId == productId && x.PositionId == positionId);
                if (item is null) return;
                AddProduct(ref product, ref item);
                if (!IsTestMode) await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                await SendChangedOrderModelToServerAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(AddProductWithModifiersInChangingMenuAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Decrease an amount of product with modifiers by ID
    private async Task RemoveProductWithModifiersInChangingMenuAsync(Guid productId, Guid positionId)
    {
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(RemoveProductInShoppingCartAsync), "Decrease an amount of product");

            var product = WebAppInfo?.TransportItemDtos?.FirstOrDefault(x => x.ItemId == productId);
            if (product is not null)
            {
                var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                if (order.Items is null) return;
                var item = order.Items.FirstOrDefault(x => x.ProductId == productId && x.PositionId == positionId);
                if (item is null) return;
                RemoveProduct(ref product, ref item);
                if (!item.HaveItems()) OrderModel.ZeroAmountOfItem(item);

                if (!order.Items.Where(x => x.ProductId == productId).Any())
                {
                    RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
                    if (!IsTestMode)
                    {
                        await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                        await JsRuntime.InvokeVoidAsync("HideViewOrderButton");
                        await JsRuntime.InvokeVoidAsync("BackButtonHide");
                    }
                }
                else await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");

                await SendChangedOrderModelToServerAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(RemoveProductWithModifiersInChangingMenuAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    //
    private void AddModifier(ref Item item, Guid modifierId, Guid? productGroupId = null)
    {
        Console.WriteLine(typeof(Index).FullName!, nameof(AddModifier), "Increase an amount of modifier");
        item.IncreaseAmountOfModifier(modifierId, productGroupId);
    }

    // 
    public void RemoveModifier(ref Item item, Guid modifierId, Guid? productGroupId = null)
    {
        Console.WriteLine(typeof(Index).FullName!, nameof(RemoveModifier), "Decrease an amount of modifier");
        item.DecreaseAmountOfModifier(modifierId, productGroupId);
    }

    // Add a modifier to product by id
    private async Task AddModifierAsync(Guid productId, Guid modifierId, Guid positionId, Guid? productGroupId = null)
    {
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(AddModifierAsync), "Increase an amount of modifier");

            var product = WebAppInfo?.ProductById(CurrentGroupId, productId);

            if (product is not null)
            {
                var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                if (order.Items is null) return;
                var item = order.Items.FirstOrDefault(x => x.ProductId == productId && x.PositionId == positionId);
                if (item is null) return;
                AddModifier(ref item, modifierId, productGroupId);
                if (!IsTestMode)
                {
                    await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                    await JsRuntime.InvokeVoidAsync("SetSelectProductWithModifiersButton", TotalSumOfSelectedProductWithModifiers(product, item));
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(AddModifierAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Remove a modifier from product by id
    private async Task RemoveModifierAsync(Guid productId, Guid modifierId, Guid positionId, Guid? productGroupId = null)
    {
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(RemoveModifierAsync), "Increase an amount of modifier");

            var product = CurrentGroupId != Guid.Empty
            ? WebAppInfo?.ItemCategories?.FirstOrDefault(x => x.Id == CurrentGroupId)?.Items?.FirstOrDefault(y => y.ItemId == productId)
            : WebAppInfo?.TransportItemDtos?.FirstOrDefault(x => x.ItemId == productId);

            if (product is not null)
            {
                var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                var item = order.Items?.FirstOrDefault(x => x.ProductId == productId && x.PositionId == positionId);
                if (item is null) return;
                RemoveModifier(ref item, modifierId, productGroupId);
                if (!IsTestMode)
                {
                    await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                    await JsRuntime.InvokeVoidAsync("SetSelectProductWithModifiersButton", TotalSumOfSelectedProductWithModifiers(product, item));
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(RemoveModifierAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Add product in the modifier menu
    private async Task AddProductInModifierMenuAsync(Guid productId, Guid positionId)
    {
        try
        {
            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            var product = WebAppInfo.TransportItemDtos.FirstOrDefault(x => x.ItemId == productId);
            if (product is not null)
            {
                var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                var item = order.Items?.FirstOrDefault(x => x.ProductId == productId && x.PositionId == positionId);
                if (item is null) return;
                AddProduct(ref product, ref item);
                if (!IsTestMode)
                {
                    await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                    await JsRuntime.InvokeVoidAsync("SetSelectProductWithModifiersButton", TotalSumOfSelectedProductWithModifiers(product, item));
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(AddProductInModifierMenuAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Remove product in the modifier menu
    private async Task RemoveProductInModifierMenuAsync(Guid productId, Guid positionId)
    {
        try
        {
            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            var product = WebAppInfo.TransportItemDtos.FirstOrDefault(x => x.ItemId == productId);
            if (product is not null)
            {
                var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                var item = order.Items?.FirstOrDefault(x => x.ProductId == productId && x.PositionId == positionId);
                if (item is null) return;
                RemoveProduct(ref product, ref item);

                if (!item.HaveItems())
                {
                    CancelSelectModifiers(item);
                    if (!IsTestMode)
                    {
                        await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                        if (OrderModel.HaveSelectedProducts()) await JsRuntime.InvokeVoidAsync("SetViewOrderButton");
                        else await JsRuntime.InvokeVoidAsync("HideViewOrderButton");
                    }
                }
                else if (!IsTestMode)
                {
                    await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                    await JsRuntime.InvokeVoidAsync("SetSelectProductWithModifiersButton", TotalSumOfSelectedProductWithModifiers(product, item));
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(RemoveProductInModifierMenuAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Add product
    private async Task AddProductForOtherMenuAsync(Guid productId)
    {
        try
        {
            if (!IsTestMode)
            {
                await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                await JsRuntime.InvokeVoidAsync("BackButtonShow");
            }

            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
            var product = WebAppInfo.TransportItemDtos.FirstOrDefault(x => x.ItemId == productId);
            var item = order.Items?.FirstOrDefault(x => x.ProductId == productId);

            if (RazorOrderInfo.OrderStatusType != OrderStatusType.OrderProductSelect)
            {
                SelectedProductId = productId;
                var items = OrderModel?.Items ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                var itm = items.FirstOrDefault(x => x.ProductId == productId);
                if (itm == null)
                {
                    AddItemToOrderWithNewPosition(productId, product);
                    item = items.Last(x => x.ProductId == productId);
                }
                else item = itm;
                RazorOrderInfo.OrderStatusType = OrderStatusType.OrderProductSelect;
            }
            if (product != null)
            {
                if (item is null) return;
                else if ((int)item.Amount <= 0) AddProduct(ref product, ref item);
                if (!IsTestMode) await JsRuntime.InvokeVoidAsync("SetSelectProductWithModifiersButton", item.Price * item.Amount);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(AddProductInOtherMenuAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Add product
    private async Task AddProductInOtherMenuAsync(Guid productId)
    {
        try
        {
            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
            var product = WebAppInfo.TransportItemDtos.FirstOrDefault(x => x.ItemId == productId);
            var item = order.Items?.FirstOrDefault(x => x.ProductId == productId);

            if (product != null)
            {
                if (item is null) return;
                AddProduct(ref product, ref item);
                if (!IsTestMode)
                {
                    await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                    await JsRuntime.InvokeVoidAsync("SetSelectProductWithModifiersButton", item.Price * item.Amount);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(AddProductInOtherMenuAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Remove product
    private async Task RemoveProductInOtherMenuAsync(Guid productId)
    {
        try
        {
            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            var product = WebAppInfo.TransportItemDtos.FirstOrDefault(x => x.ItemId == productId);
            if (product != null)
            {
                var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                var item = order.Items?.FirstOrDefault(x => x.ProductId == productId);
                if (item is null) return;
                RemoveProduct(ref product, ref item);

                if (!item.HaveItems())
                {
                    CancelSelectedProduct(item);
                    if (!IsTestMode)
                    {
                        await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                        if (OrderModel.HaveSelectedProducts()) await JsRuntime.InvokeVoidAsync("SetViewOrderButton");
                        else await JsRuntime.InvokeVoidAsync("HideViewOrderButton");
                    }
                }
                else if (!IsTestMode)
                {
                    await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                    await JsRuntime.InvokeVoidAsync("SetSelectProductWithModifiersButton", item.Price * item.Amount);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(RemoveProductInOtherMenuAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    //
    private async Task<WalletBalance> RetrieveWalletBalanceAsync()
    {
        var json = JsonConvert.SerializeObject(new { chatId = ChatId });
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await Http.PostAsync(OrderControllerPath + "walletBalance", data) ?? throw new Exception($"!!!");
        string responseBody = await response.Content.ReadAsStringAsync();
        if (!response.StatusCode.Equals(HttpStatusCode.OK))
            throw new HttpProcessException(response.StatusCode, responseBody);
        return JsonConvert.DeserializeObject<WalletBalance>(responseBody) ?? throw new Exception("Json the wallet balance result is empty");
    }

    // Set the order to view status (use only in web mode)
    private async Task ViewOrder()
    {
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(ViewOrder), "Show the preview selected products in order");
            RazorOrderInfo.OrderStatusType = OrderStatusType.OrderView;
            UpdateTotalSumOfOrder();
            var res = await CalculateLoyaltyProgramAsync();
            var walletBalance = await RetrieveWalletBalanceAsync();
            CalculateAllowedBonusSum(walletBalance.Balance, res);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(ViewOrder)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    private string IntOrSomeNumberOfDigitsFromCurrentCulture(double number, int numberOfDigitsFromCurrentCulture)
    => ((int)(number * 100) % 100) != 0 ? string.Format($"{{0:F{numberOfDigitsFromCurrentCulture}}}", number) : ((int)number).ToString();

    private string IntOrSomeNumberOfDigitsFromCurrentCulture(float number, int numberOfDigitsFromCurrentCulture)
    => ((int)(number * 100) % 100) != 0 ? string.Format($"{{0:F{numberOfDigitsFromCurrentCulture}}}", number) : ((int)number).ToString();

    // Tracking the click of the main telegram button
    private async Task TelegramHandlerMainButtonAsync()
    {
        // Wait a callback from the telegram    
        Console.WriteLine(typeof(Index).FullName!, nameof(TelegramHandlerMainButtonAsync), "Listening the TelegramBot main button");

        int exCount = 0;
        while (true)
        {
            try
            {
                if (WebAppInfo is null)
                {
                    HaveErrors = true;
                    throw new Exception("~~~");
                }

                await JsRuntime.InvokeVoidAsync("HandlerMainButton");
                if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderSelect)
                {
                    Console.WriteLine(typeof(Index).FullName!, nameof(TelegramHandlerMainButtonAsync), "Show the preview selected products in order");

                    var totalSum = UpdateTotalSumOfOrder();

                    if (OrderModel is null) continue;

                    if (WebAppInfo.UseIikoBizProgram)
                    {
                        // Show the telegram button for to pay the order
                        var res = await CalculateLoyaltyProgramAsync();
                        if (OrderModel.DiscountProcent > 0)
                        {
                            var necessarySum = (100 * minCurrent) / (100 - OrderModel.DiscountProcent);
                            var differenceSum = necessarySum - totalSum;
                            if (differenceSum > 0)
                            {
                                string necessarySumAsString = IntOrSomeNumberOfDigitsFromCurrentCulture(necessarySum, 2);
                                string differenceSumAsString = IntOrSomeNumberOfDigitsFromCurrentCulture(differenceSum, 2);
                                await JsRuntime.InvokeVoidAsync("SetOkPopupMessage", "", $"Минимальная сумма заказа со скидкой должна состовлять ₽{necessarySumAsString}." +
                                $"Закажите еще на ₽{differenceSumAsString}",
                                HapticFeedBackNotificationType.warning.ToString());
                                continue;
                            }
                        }
                        var walletBalance = await RetrieveWalletBalanceAsync();
                        CalculateAllowedBonusSum(walletBalance.Balance, res);
                    }
                    else if (OrderModel is not null)
                    {
                        OrderModel.FinalSum = totalSum;
                        if (totalSum < minCurrent)
                        {
                            await JsRuntime.InvokeVoidAsync("SetOkPopupMessage", "", $"Минимальная сумма заказа не может быть меньше ₽{minCurrent}",
                            HapticFeedBackNotificationType.warning.ToString());
                            continue;
                        }
                    }

                    // Transition page to order view state
                    RazorOrderInfo.OrderStatusType = OrderStatusType.OrderView;
                    await JsRuntime.InvokeVoidAsync("ScrollToTop");
                    await JsRuntime.InvokeVoidAsync("BackButtonShow");
                    await JsRuntime.InvokeVoidAsync("SetPayOrderButton",
                    WebAppInfo.UseIikoBizProgram ? OrderModel?.FinalSum : OrderModel?.TotalSum ?? 0);
                    StateHasChanged();
                }
                else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderProductWithModifiersSelect)
                {
                    Console.WriteLine(typeof(Index).FullName!, nameof(TelegramHandlerMainButtonAsync), "Show the preview selected modifiers in order");

                    var item = OrderModel?.Items?.FirstOrDefault(x => x.ProductId == SelectedProductId && x.PositionId == ProductPositionId);
                    if (item is null || !item.IsReachedMinAmountOfGroupModifiers() || !item.IsReachedMinAmountOfModifiers())
                    {
                        await JsRuntime.InvokeVoidAsync("SetOkPopupMessage", "", "Не выбран обязательный модификатор", HapticFeedBackNotificationType.warning.ToString());
                        continue;
                    }

                    RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
                    StateHasChanged();
                    await JsRuntime.InvokeVoidAsync("BackButtonHide");
                    await JsRuntime.InvokeVoidAsync("SetViewOrderButton");
                    await SendChangedOrderModelToServerAsync();
                }
                else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderProductSelect)
                {
                    Console.WriteLine(typeof(Index).FullName!, nameof(TelegramHandlerMainButtonAsync), "Show the preview selected products in order");

                    RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
                    StateHasChanged();
                    await JsRuntime.InvokeVoidAsync("BackButtonHide");
                    await JsRuntime.InvokeVoidAsync("SetViewOrderButton");
                    await SendChangedOrderModelToServerAsync();
                }
                else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderProductWithModifiersRemove)
                {
                    RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
                    StateHasChanged();
                    await JsRuntime.InvokeVoidAsync("BackButtonHide");
                    await JsRuntime.InvokeVoidAsync("SetViewOrderButton");
                    await SendChangedOrderModelToServerAsync();
                }
                else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderView)
                {
                    Console.WriteLine(typeof(Index).FullName!, nameof(TelegramHandlerMainButtonAsync), "Save the created order in db and send it to server");
                    FinishedRender = false;

                    await JsRuntime.InvokeVoidAsync("ShowProgress");

                    if (OrderModel != null && OrderModel.FinalSum < minCurrent)
                    {
                        await JsRuntime.InvokeVoidAsync("SetOkPopupMessage", "", "Сумма заказа слишком мала", HapticFeedBackNotificationType.warning.ToString());
                        continue;
                    }
                    else if (string.IsNullOrEmpty(CityValue) && OrderModel is not null && OrderModel.ByCourier)
                    {
                        await JsRuntime.InvokeVoidAsync("SetOkPopupMessage", "", "Укажите пожалуйста Ваш город", HapticFeedBackNotificationType.warning.ToString());
                        continue;
                    }
                    else if (string.IsNullOrEmpty(StreetValue) && OrderModel is not null && OrderModel.ByCourier)
                    {
                        await JsRuntime.InvokeVoidAsync("SetOkPopupMessage", "", "Укажите пожалуйста улицу", HapticFeedBackNotificationType.warning.ToString());
                        continue;
                    }
                    else if (string.IsNullOrEmpty(HouseValue) && OrderModel is not null && OrderModel.ByCourier)
                    {
                        await JsRuntime.InvokeVoidAsync("SetOkPopupMessage", "", "Укажите пожалуйста номер дома", HapticFeedBackNotificationType.warning.ToString());
                        continue;
                    }
                    // End the order

                    if (OrderModel is not null)
                    {
                        OrderModel.Comment = CommentValue;
                        OrderModel.Address = new(CityValue, StreetValue, HouseValue, FlatValue, EntranceValue, FloorValue);

                        var walletBalance = await RetrieveWalletBalanceAsync();
                        if (walletBalance?.Balance is not null && OrderModel.BonusSum != walletBalance.Balance)
                        {

                            CalculateAllowedBonusSum(walletBalance.Balance);
                            await JsRuntime.InvokeVoidAsync("SetOkPopupMessage", "", "Ваш остаток бонусов изменился в процессе выполнения операции оплаты",
                            HapticFeedBackNotificationType.warning.ToString());
                            continue;
                        }
                    }

                    await SendChangedOrderModelToServerAsync();
                    await CreateInvoiceLinkAsync();
                    await JsRuntime.InvokeVoidAsync("HideProgress");
                }
            }
            catch (Exception ex)
            {
                if (exCount < 3)
                {
                    exCount++;
                }
                else
                {
                    HaveErrors = true;
                    await JsRuntime.InvokeVoidAsync("CloseWebApp");
                    return;
                }
                Console.WriteLine(ex.Message);
                await Task.Delay(25);
            }
        }
    }

    // Set the order select state back (use only in web mode)
    private void EditOrder()
    {
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(EditOrder), "Get back to select products page");
            RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(EditOrder)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // 
    private void AddChatId(long chatId)
    {
        Console.WriteLine(typeof(Index).FullName!, nameof(AddChatId), "Add a chat id via the TelegramBot");
        ChatId = chatId;
        if (OrderModel != null) OrderModel.ChatId = chatId;
    }

    // 
    public async Task<InvoiceLinkStatus> CreateInvoiceUrlLinkAsync()
    {
        try
        {
            var body = JsonConvert.SerializeObject(OrderModel);
            var data = new StringContent(body, Encoding.UTF8, "application/json");
            var response = await Http.PostAsync(OrderControllerPath + "createInvoiceLink", data);

            string responseBody = await response.Content.ReadAsStringAsync();
            if (response.StatusCode != HttpStatusCode.OK)
                throw new HttpProcessException(response.StatusCode, responseBody);

            return JsonConvert.DeserializeObject<InvoiceLinkStatus>(responseBody) ?? throw new Exception("Received an invoice link is invalid");
        }
        catch (HttpRequestException hre)
        {
            Console.WriteLine(hre.Message);
            return new(false, null, hre.Message);
        }
        catch (HttpProcessException hpe)
        {
            Console.WriteLine(hpe.Message);
            return new(false, null, hpe.Message);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return new(false, null, ex.Message);
        }
    }

    // 
    private async Task<string?> CreateAndGetInvoiceLinkAsync()
    {
        var response = await CreateInvoiceUrlLinkAsync();

        if (response.Ok) return response.InvoiceLink;
        else return null;
    }

    // Pay the completed order (use only in web mode)
    private async Task PayOrder()
    {
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(PayOrder), "Show info about created order");
            AddChatId(ChatIdForTestMode);
            if (OrderModel is not null)
            {
                OrderModel.Comment = CommentValue;
                OrderModel.Address = new(CityValue, StreetValue, HouseValue, FlatValue, EntranceValue, FloorValue);
            }
            var result = await CreateAndGetInvoiceLinkAsync();
            //await OrderService.SendCreatedOrderToTelegramBot();
            RazorOrderInfo.OrderStatusType = OrderStatusType.OrderCreated;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(PayOrder)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Initialize the Telegram connection
    private async Task MakeTelegramReadyAsync()
    {
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(MakeTelegramReadyAsync), "Ready to connect with the TelegramBot and get chat id");
            var chatId = await JsRuntime.InvokeAsync<long>("InitTelegram");
            // Add received chatId via the TelegramBot
            AddChatId(chatId);
            RazorOrderInfo.IsTelegramConnectionInit = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(ViewOrder)}.{nameof(Exception)}: " +
                $"{ex.Message}");
            HaveErrors = true;
            StateHasChanged();
        }
    }

    // Cancel the selected product in modifier menu
    private async Task CancelSelectModifiersAsync(Guid productId, Guid positionId)
    {
        try
        {
            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
            var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
            var item = order.Items?.Last(x => x.ProductId == productId && x.PositionId == positionId) ??
            throw new Exception($"{typeof(Index).FullName}.{nameof(CancelSelectModifiersAsync)}.{nameof(Exception)}: " +
                $"{nameof(Item)} can't be null");
            var product = WebAppInfo.TransportItemDtos.FirstOrDefault(x => x.ItemId == productId);
            if (product is not null) product.TotalAmount -= (int)item.Amount;
            OrderModel.ZeroAmountOfItem(item);

            if (!IsTestMode)
            {
                if (OrderModel.HaveSelectedProducts())
                {
                    await JsRuntime.InvokeVoidAsync("SetViewOrderButton");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("HideViewOrderButton");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(CancelSelectModifiersAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Cancel the selected product
    //private void CancelSelectedProductFromTlgHandlerBack(Guid productId)
    //{
    //    try
    //    {
    //        RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
    //    }
    //    catch (Exception ex)
    //    {
    //        Console.WriteLine($"{typeof(Index).FullName}.{nameof(CancelSelectedProduct)}.{nameof(Exception)}: " +
    //            $"{ex.Message}");
    //    }
    //}

    // Cancel the selected product
    private void CancelSelectedProduct(Guid productId)
    {
        try
        {
            RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(CancelSelectedProduct)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Cancel the selected product in modifier menu
    private void CancelSelectModifiers(Item item)
    {
        try
        {
            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
            var order = OrderModel;
            if (order is null) return;
            var product = WebAppInfo.TransportItemDtos.FirstOrDefault(x => x.ItemId == item.ProductId);
            if (product is not null) product.TotalAmount -= (int)item.Amount;
            order.ZeroAmountOfItem(item);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(CancelSelectModifiersAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Cancel the selected product
    private void CancelSelectedProduct(Item item)
    {
        try
        {
            RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(CancelSelectedProduct)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Cancel the selected products with modifiers in main menu
    private async Task CancelSelectedProductsWithModifiersAsync(Guid productId)
    {
        try
        {
            if (WebAppInfo?.TransportItemDtos is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            if (OrderModel is null) return;
            OrderModel.RemoveItemsById(productId);
            var product = WebAppInfo.TransportItemDtos.FirstOrDefault(x => x.ItemId == productId);
            if (product is not null) product.TotalAmount = 0;
            RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
            if (!IsTestMode && !OrderModel.HaveSelectedProducts())
                await JsRuntime.InvokeVoidAsync("HideViewOrderButton");
            else
                await JsRuntime.InvokeVoidAsync("SetViewOrderButton");
            await JsRuntime.InvokeVoidAsync("BackButtonHide");
            await SendChangedOrderModelToServerAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(CancelSelectedProductsWithModifiersAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Finish to select product with modifiers (use only in web mode)
    private void CompleteSelectModifiers()
    {
        try
        {
            RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(CompleteSelectModifiers)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Finish to select product with modifiers (use only in web mode)
    private void CompleteSelectedProducts()
    {
        try
        {
            RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(CompleteSelectModifiers)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Tracking the click of the back telegram button
    private async Task TelegramHandlerBackButtonAsync()
    {
        // Wait a callback from the telegram
        Console.WriteLine(typeof(Index).FullName!, nameof(TelegramHandlerBackButtonAsync), "Listening the TelegramBot main button");
        int exCount = 0;

        while (true)
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("HandlerBackButtonClicked");
                if (IsPageBlocked) return;

                if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderProductWithModifiersSelect)
                {
                    await JsRuntime.InvokeVoidAsync("BackButtonHide");
                    await CancelSelectModifiersAsync(SelectedProductId, ProductPositionId);
                    StateHasChanged();
                }
                else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderProductSelect)
                {
                    await JsRuntime.InvokeVoidAsync("BackButtonHide");
                    RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
                    StateHasChanged();
                }
                else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderProductWithModifiersRemove)
                {
                    RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
                    await JsRuntime.InvokeVoidAsync("BackButtonHide");
                    await JsRuntime.InvokeVoidAsync("SetViewOrderButton");
                    StateHasChanged();
                }
                else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderView)
                {
                    Console.WriteLine(typeof(Index).FullName!, nameof(TelegramHandlerBackButtonAsync), "Show the preview selected products in order back");
                    FinishedRender = false;
                    await JsRuntime.InvokeVoidAsync("BackButtonHide");
                    RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
                    StateHasChanged();
                    await JsRuntime.InvokeVoidAsync("SetViewOrderButton");
                    for (int i = 0; i < 10; i++)
                    {
                        if (FinishedRender)
                        {
                            if (OrderModel is not null)
                            {
                                OrderModel.Comment = CommentValue;
                                OrderModel.Address = new(CityValue, StreetValue, HouseValue, FlatValue, EntranceValue, FloorValue);
                            }
                            break;
                        }
                        await Task.Delay(1);
                    }
                    await SendChangedOrderModelToServerAsync();
                }
            }
            catch (Exception ex)
            {
                if (exCount < 3)
                {
                    exCount++;
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("CloseWebApp");
                    return;
                }
                Console.WriteLine(ex.Message);
                await Task.Delay(25);
            }
        }
    }

    // Listen handler events of JS (***Testing mode***)
    async Task ListenTlgMainButtonAsync()
    {
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(ListenTlgMainButtonAsync), "Listening the main button of the TelegramBot");
            // Call handler to catch the click of telegram button
            var mainButtonTask = TelegramHandlerMainButtonAsync();
            var backButtonTask = TelegramHandlerBackButtonAsync();
            await mainButtonTask;
            await backButtonTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(ListenTlgMainButtonAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
            HaveErrors = true;
            StateHasChanged();
        }
    }

    // Create the invoice link, open it in the TelegramBot and process event results (beta)
    async Task<string?> CreateInvoiceLinkAsync()
    {
        try
        {
            var result = await CreateInvoiceUrlLinkAsync();
            if (!result.Ok)
            {
                await JsRuntime.InvokeVoidAsync("SetOkPopupMessage", "", result.Message, HapticFeedBackNotificationType.error.ToString());
                return result.Message;
            }

            var invoiceClosedStatus = await JsRuntime.InvokeAsync<string>("HandlerOpenInvoice", result.InvoiceLink);

            if (!Enum.TryParse(invoiceClosedStatus, out InvoiceClosedStatus invoiceClosedType))
            {
                Console.WriteLine($"Failed to convert string value to {nameof(InvoiceClosedStatus)} type");
                return invoiceClosedStatus;
            }

            switch (invoiceClosedType)
            {
                case InvoiceClosedStatus.cancelled:
                    {
                        RazorOrderInfo.OrderStatusType = OrderStatusType.OrderView;
                        await JsRuntime.InvokeVoidAsync("HapticFeedbackSet");
                        break;
                    }
                case InvoiceClosedStatus.paid:
                    {
                        await JsRuntime.InvokeVoidAsync("CloseWebApp");
                        break;
                    }
                default: break;
            }

            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(CreateInvoiceLinkAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
            return ex.Message;
        }
    }

    // Receive terminal id from html form (beta)
    private async Task OnSelectTerminal(ChangeEventArgs e)
    {
        if (IsPageBlocked) return;
        try
        {
            if (WebAppInfo is null)
            {
                HaveErrors = true;
                throw new Exception("!!!");
            }

            Console.WriteLine("The selected ID is " + e.Value?.ToString());
            var arg = Convert.ToString(e.Value);
            if (!string.IsNullOrEmpty(arg))
            {
                var id = Guid.Parse(arg);
                var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                order.TerminalId = id;
                var delTerminal = DeliveryTerminals?.FirstOrDefault(x => x.Id == id);
                if (delTerminal != null)
                    order.DeliveryTerminal = new(id, delTerminal.Name);
                if (WebAppInfo.UseIikoBizProgram)
                {
                    await CalculateLoyaltyProgramAsync();
                    await JsRuntime.InvokeVoidAsync("SetPayOrderButton", OrderModel?.FinalSum ?? 0);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(OnSelectTerminal)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Receive the product by ID
    private TransportItemDto ProductById(Guid id)
    {
        try
        {
            return WebAppInfo?.TransportItemDtos?.FirstOrDefault(x => x.ItemId == id)
            ?? throw new Exception($"{typeof(Index).FullName}.{nameof(ProductById)}.{nameof(Exception)}: " +
                        $"Not found product by ID - '{id}'");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(ProductById)}.{nameof(Exception)}: " +
                $"{ex.Message}");
            HaveErrors = true;
            StateHasChanged();
            return new TransportItemDto();
        }
    }

    // Receive the item by ID
    private Item ItemById(Guid productId, Guid positionId)
    {
        try
        {
            var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
            return order.Items?.FirstOrDefault(x => x.ProductId == productId && x.PositionId == positionId)
            ?? throw new Exception($"{typeof(Index).FullName}.{nameof(ItemById)}.{nameof(Exception)}: " +
                        $"Not found item by ProductID - '{productId}' and PositionID - '{positionId}'");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(ItemById)}.{nameof(Exception)}: " +
                $"{ex.Message}");
            HaveErrors = true;
            StateHasChanged();
            return new Item();
        }
    }

    // Receive the item by ID
    private Item ItemById(Guid productId)
    {
        try
        {
            var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
            return order.Items?.FirstOrDefault(x => x.ProductId == productId)
            ?? throw new Exception($"{typeof(Index).FullName}.{nameof(ItemById)}.{nameof(Exception)}: " +
                        $"Not found item by ProductID - '{productId}'");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(ItemById)}.{nameof(Exception)}: " +
                $"{ex.Message}");
            HaveErrors = true;
            StateHasChanged();
            return new Item();
        }
    }

    // 
    private async Task<Checkin> CalculateCheckinAsync()
    {
        var json = JsonConvert.SerializeObject(OrderModel);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await Http.PostAsync(OrderControllerPath + "calculateCheckin", data) ?? throw new Exception($"!!!");
        string responseBody = await response.Content.ReadAsStringAsync();
        if (!response.StatusCode.Equals(HttpStatusCode.OK))
            throw new HttpProcessException(response.StatusCode, responseBody);
        return JsonConvert.DeserializeObject<Checkin>(responseBody) ?? throw new Exception("Json convert order model is empty");
    }

    // Calculate discount program
    private async Task<Checkin?> CalculateLoyaltyProgramAsync()
    {
        IsPageBlocked = true;

        await JsRuntime.InvokeVoidAsync("ShowProgress");
        if (IsTestMode) AddChatId(ChatIdForTestMode);
        try
        {
            if (OrderModel != null)
            {
                var result = await CalculateCheckinAsync();

                if (!string.IsNullOrEmpty(result.WarningMessage))
                {
                    Console.WriteLine(result.WarningMessage);
                    await JsRuntime.InvokeVoidAsync("HideProgress");
                    if (!IsTestMode) await JsRuntime.InvokeVoidAsync("SetOkPopupMessage", "", result.WarningMessage, HapticFeedBackNotificationType.warning.ToString());
                    OrderModel.Coupon = string.Empty;
                    IsPageBlocked = false;
                    return null;
                }
                else if (result.LoyaltyProgramResults != null && result.LoyaltyProgramResults.Any())
                {
                    OrderModel.DiscountSum = 0;
                    OrderModel.FreePriceItems.Clear();
                    OrderModel.FreeItems.Clear();
                    var products = WebAppInfo?.TransportItemDtos;

                    foreach (var loyaltyProgram in result.LoyaltyProgramResults)
                    {
                        if (loyaltyProgram.Discounts is not null && loyaltyProgram.Discounts.Any())
                        {
                            foreach (var discount in loyaltyProgram.Discounts)
                            {
                                OrderModel.DiscountSum += discount.DiscountSum;
                                if (discount.Code == (int)DiscountType.FreeProduct && discount.OrderItemId != null && discount.OrderItemId != Guid.Empty)
                                    OrderModel.FreePriceItems.Add((Guid)discount.OrderItemId);
                            }
                        }
                        if (loyaltyProgram.FreeProducts is not null && loyaltyProgram.FreeProducts.Any())
                        {
                            foreach (var freeProduct in loyaltyProgram.FreeProducts)
                            {
                                if (freeProduct.Products is not null && freeProduct.Products.Any())
                                {
                                    foreach (var product in freeProduct.Products)
                                    {
                                        if (products is not null && products.Any())
                                        {
                                            var sourceProduct = products.FirstOrDefault(x => x.ItemId == product.Id);
                                            OrderModel.FreeItems.Add(new Item(
                                                productId: product.Id,
                                                productName: sourceProduct?.Name ?? string.Empty,
                                                amount: 1,
                                                type: sourceProduct?.OrderItemType ?? "Product"));
                                        }
                                    }
                                }
                            }
                        }
                    }

                    OrderModel.FinalSum = OrderModel.TotalSum - OrderModel.DiscountSum;
                    OrderModel.DiscountProcent = OrderModel.DiscountSum * 100 / OrderModel.TotalSum;
                }

                IsPageBlocked = false;
                await JsRuntime.InvokeVoidAsync("HideProgress");
                return result;
            }
            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            IsPageBlocked = false;
            await JsRuntime.InvokeVoidAsync("HideProgress");
            if (!IsTestMode) await JsRuntime.InvokeVoidAsync("SetOkPopupMessage", "", ex.Message, HapticFeedBackNotificationType.error.ToString());
            return null;
        }
    }

    // Calculate discount program
    private async Task CalculateDiscountProgramByCouponAsync()
    {
        if (OrderModel != null) OrderModel.Coupon = CouponValue;
        await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
        await CalculateLoyaltyProgramAsync();
        await JsRuntime.InvokeVoidAsync("SetPayOrderButton", OrderModel?.FinalSum ?? 0);
    }

    // 
    private async Task ChangeDeliveryTypeFlagAsync(bool byCourier)
    {
        if (IsPageBlocked) return;
        if (OrderModel != null) OrderModel.ByCourier = byCourier;
        await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
        if (WebAppInfo is not null && WebAppInfo.UseIikoBizProgram)
        {
            await CalculateLoyaltyProgramAsync();
            await JsRuntime.InvokeVoidAsync("SetPayOrderButton", OrderModel?.FinalSum ?? 0);
        }
    }

    //
    private async Task ScrollToTopAsync()
    {
        await JsRuntime.InvokeVoidAsync("ScrollBack");
    }

    // Remove all selected products in the shopping cart
    private async Task RemoveAllSelectedProductsInShoppingCartAsync()
    {
        try
        {
            if (!IsTestMode)
            {
                await JsRuntime.InvokeVoidAsync("HapticFeedbackNotificationSet", HapticFeedBackNotificationType.warning.ToString());
                var allow = await JsRuntime.InvokeAsync<bool>("RemoveSelectedProductsWithMofifiers", "Вы действительно хотите очистить корзину?");
                if (allow)
                {
                    if (OrderModel != null)
                    {
                        OrderModel.TotalAmount = 0;
                        if (OrderModel.Items is not null) OrderModel.Items.Clear();
                    }

                    if (WebAppInfo?.TransportItemDtos is not null)
                        foreach (var product in WebAppInfo.TransportItemDtos)
                            product.TotalAmount = 0;

                    RazorOrderInfo.OrderStatusType = OrderStatusType.OrderSelect;
                    await JsRuntime.InvokeVoidAsync("HideViewOrderButton");
                    await JsRuntime.InvokeVoidAsync("BackButtonHide");
                    await SendChangedOrderModelToServerAsync();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(RemoveSelectedProductsWithMofifiersByIdAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    // Remove selected products with modifiers by ID
    private async Task RemoveSelectedProductsWithMofifiersByIdAsync(Guid productId)
    {
        try
        {
            if (!IsTestMode)
            {
                await JsRuntime.InvokeVoidAsync("HapticFeedbackNotificationSet", HapticFeedBackNotificationType.warning.ToString());
                var allow = await JsRuntime.InvokeAsync<bool>("RemoveSelectedProductsWithMofifiers", "Вы хотите удалить выбранные позиции?");
                if (allow) await CancelSelectedProductsWithModifiersAsync(productId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{typeof(Index).FullName}.{nameof(RemoveSelectedProductsWithMofifiersByIdAsync)}.{nameof(Exception)}: " +
                $"{ex.Message}");
        }
    }

    //
    private double TotalSumOfSelectedProductWithModifiers(Guid productId, Guid positionId)
    {
        if (OrderModel is null) throw new Exception($"{typeof(Index).FullName}.{nameof(TotalSumOfSelectedProductWithModifiers)}.{nameof(Exception)}: " +
            $"{nameof(OrderModel)} can't be null");

        if (OrderModel.Items is not null)
        {
            var product = WebAppInfo?.ProductById(CurrentGroupId, productId);
            var item = OrderModel.Items.First(x => x.ProductId == productId && x.PositionId == positionId);

            if (product is not null)
            {
                var productPrice = product.Price(item.ProductSizeId) ?? throw new Exception($"{typeof(Index).FullName}.{nameof(TotalSumOfSelectedProductWithModifiers)}.{nameof(Exception)}: " +
                    $"Price of product by ID - '{product.ItemId}' can't be null");
                return (productPrice + PriceWithModifiersByProductId(item)) * item.Amount;
            }
            throw new Exception($"{typeof(Index).FullName}.{nameof(TotalSumOfSelectedProductWithModifiers)}.{nameof(Exception)}: " +
                $"Product by ID - '{productId}' can't be null");
        }
        return double.MaxValue;
    }

    //
    public string ImageLinkByProductId(Guid id)
    {
        var imageLink = WebAppInfo?.TransportItemDtos?.FirstOrDefault(x => x.ItemId == id)?.ImageLink();
        return imageLink ?? string.Empty;
    }

    //
    private string InfoAboutCreatedOrder()
    {
        Console.WriteLine(typeof(Index).FullName!, nameof(InfoAboutCreatedOrder),
            $"Insert the {nameof(OrderModel)} item into db and info in the WebApp about the created order");
        if (OrderModel is null) throw new Exception($"{typeof(Index).FullName}.{nameof(InfoAboutCreatedOrder)}.{nameof(Exception)}: " +
            $"{nameof(OrderModel)} can't be null");

        try
        {
            // Info of the selected products
            string selectedProductsInfo = string.Empty;
            if (OrderModel.Items is not null)
                foreach (var product in OrderModel.Items)
                    selectedProductsInfo += $"{product.ProductName} x{product.Amount} - ₽{product.Price}\n";

            return $"Order summary:\n" +
            $"operationId: {OrderModel.OperationId}\n" +
            $"\n{selectedProductsInfo}\n" +
            $"Total: ₽{OrderModel.TotalSum}\n" +
            $"Comment: {OrderModel.Comment}\n" +
            $"Order's create date: {OrderModel.CreatedDate}";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return "Database Error";
        }
    }

    //
    private async Task OnChangingProductSizeAsync(ChangeEventArgs arg)
    {
        var value = arg.Value?.ToString();
        if (value is not null && Guid.TryParse(value, out Guid sizeId))
        {
            try
            {
                var product = WebAppInfo?.ProductById(CurrentGroupId, SelectedProductId);

                if (product is not null)
                {
                    var order = OrderModel ?? throw new Exception($"{nameof(OrderModel)} can't be null");
                    if (order.Items is null) return;
                    var item = order.Items.FirstOrDefault(x => x.ProductId == SelectedProductId && x.PositionId == ProductPositionId);
                    if (item is null) return;
                    item.ProductSizeId = sizeId;
                    item.Price = product.Price(sizeId);
                    if (!IsTestMode)
                    {
                        await JsRuntime.InvokeVoidAsync("HapticFeedbackSelectionChangedSet");
                        await JsRuntime.InvokeVoidAsync("SetSelectProductWithModifiersButton", TotalSumOfSelectedProductWithModifiers(product, item));
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{typeof(Index).FullName}.{nameof(AddModifierAsync)}.{nameof(Exception)}: " +
                    $"{ex.Message}");
            }
        }
    }

    //
    private void CalculateAllowedBonusSum(double bonusSum, Checkin? checkin = null)
    {
        if (OrderModel is not null)
        {
            OrderModel.AvailableWalletSum = null;
            if (checkin?.AvailablePayments is not null && checkin.AvailablePayments.Any())
            {
                double minAvailableSum = double.MaxValue;
                foreach (var availablePayment in checkin.AvailablePayments)
                {
                    if (availablePayment.MaxSum == 0)
                    {
                        minAvailableSum = 0;
                        break;
                    }
                    minAvailableSum = availablePayment.MaxSum <= minAvailableSum ? availablePayment.MaxSum : minAvailableSum;
                }
                if (minAvailableSum != double.MaxValue) OrderModel!.AvailableWalletSum = minAvailableSum;
            }
            OrderModel.BonusSum = bonusSum;
            var perhapsBonusSum = OrderModel.FinalSum - minCurrent;
            if (perhapsBonusSum <= 0) OrderModel.AllowedBonusSum = 0;
            else OrderModel.AllowedBonusSum = perhapsBonusSum > OrderModel.BonusSum ? (int)OrderModel.BonusSum : (int)perhapsBonusSum;
            if (OrderModel.AvailableWalletSum is not null)
            {
                var value = (int)Math.Floor((double)OrderModel.AvailableWalletSum);
                OrderModel.AllowedBonusSum = OrderModel.AllowedBonusSum > value ? value : OrderModel.AllowedBonusSum;
            }
            OrderModel.SelectedBonusSum = OrderModel.AllowedBonusSum;
        }
    }

    //
    private void OnChangeAllowedBonusSum(ChangeEventArgs arg)
    {
        var value = arg.Value?.ToString();
        if (value is not null && OrderModel is not null && Int32.TryParse(value, out var bonusSum))
        {
            var finalSumWithBonus = OrderModel.FinalSum - bonusSum;
            if (minCurrent <= finalSumWithBonus)
            {
                OrderModel.SelectedBonusSum = bonusSum;
            }
            else
            {
                var perhapsBonusSum = OrderModel.FinalSum - minCurrent;
                if (perhapsBonusSum <= 0) OrderModel.SelectedBonusSum = 0;
                else OrderModel.SelectedBonusSum = perhapsBonusSum > OrderModel.BonusSum ? (int)OrderModel.BonusSum : (int)perhapsBonusSum;
            }
        }
    }

    #endregion
}
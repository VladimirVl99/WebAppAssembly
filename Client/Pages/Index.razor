@page "/"
@using System.Net.Http
@using ApiServerForTelegram.Entities.EExceptions
@using ApiServerForTelegram.Entities.IikoCloudApi.General.Menu.RetrieveExternalMenuByID
@using Newtonsoft.Json
@using System.Net
@using System.Text
@using TlgWebAppNet
@using WebAppAssembly.Client.Repositories.JsHelper
@using WebAppAssembly.Shared.Entities.EMenu
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using WebAppAssembly.Shared.Entities.CreateDelivery
@using WebAppAssembly.Shared.Entities.Exceptions
@using WebAppAssembly.Shared.Entities.IikoCloudApi
@using WebAppAssembly.Shared.Entities.Telegram
@using WebAppAssembly.Shared.Entities.WebApp
@using WebAppAssembly.Shared.Models
@using WebAppAssembly.Shared.Models.Order
@using WebAppAssembly.Shared.Entities
@using Product = WebAppAssembly.Shared.Entities.EMenu.Product
@using WebAppAssembly.Client.Service
@inject IJSRuntime JsRuntime
@inject HttpClient Http

<PageTitle>Index</PageTitle>

@* Show the main page of shopping online after downloading the data *@
@if (IsLoadedGeneralInfo)
{
    // Show an error message when the following conditions occur
    if (OrderService is null || (OrderService.IsReleaseMode && TwaNet is null) || StateOfPage is null || StateOfPage.HaveErrors || JsHelperService is null)
    {
        <div>
            <h6 style="text-align:center;">Happened something wrong :(</h6>
        </div>
    }
    // Show operating states in case of successful data upload from the API server
    else
    {
        // General data that is used for a shopping online
        var dgi = OrderService.GeneralInfoOfOnlineStore;

        // Show the main page for:
        // - selecting products
        // - selecting categories of products
        // - selecting the number of products
        // This page is showing categories and products with simple info (images, prices, chosed amounts and restrictions)
        if (StateOfPage.PageTypeOfOrder == PageViewType.SelectingProducts)
        {
            // Info of categories of menu
            var itemCategories = dgi.ItemCategories;
            // Info of a some category
            TransportMenuCategoryDto? itemCategory = null;

            // Show all categories of menu
            if (itemCategories is not null && itemCategories.Any())
            {
                <h1 style="padding-top: 5px;margin-bottom: 0px;text-align: center;">
                    Категории
                </h1>
                <hr style="color:grey;margin-bottom:0px;margin-top:10px;"/>
                <div class="horizontal_slider" style="padding-left: 0px;padding-right: 0px;padding-top:5px;margin-top: 0px;padding-bottom:10px;">
                    <div class="slider_container">
                        @* When the category image is been clicked, the menu of the selected category will been shown *@
                        @foreach (var category in itemCategories)
                        {
                            // Save the category info if the some category has been selected
                            if (OrderService.CurrentGroupId is not null && category.Id == (Guid)OrderService.CurrentGroupId)
                            {
                                itemCategory = category;
                            }

                            <div class="item">
                                <div class="row" style="--bs-gutter-x:0.6rem;">
                                    <img class="img-fluid rounded" src="@category.ButtonImageUrl" alt="@category.Name" @onclick="(e => AddCurrentGroupId(category.Id))"/>
                                </div>
                                <div class="row" style="--bs-gutter-x:0.6rem;">
                                    <h6 style="text-align:center;">@category.Name</h6>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            // If no category in the menu has been selected, then the entire menu is shown, otherwise the menu of the selected category is shown
            var products = itemCategory is null ? dgi.TransportItemDtos : itemCategory.Items;

            // Show the menu of the selected category
            if (itemCategory is not null)
            {
                <h1 style="padding-top: 0px;margin-bottom: 0px;text-align:center;">
                    @itemCategory.Name
                </h1>
            }
            // Show the entire menu
            else
            {
                <h1 style="padding-top: 0px;margin-bottom: 0px;text-align:center;">
                    Меню
                </h1>
            }
            <hr style="color:grey;"/>

            // Show positions in three columns
            if (products is not null)
            {
                var productsArr = products.ToArray();
                // Number of columns
                const int columnAmount = 3;
                int productCount = productsArr.Length;

                for (int i = 0; i < productCount; i += columnAmount)
                {
                    <div>
                        @* Notice! Width of each column needs to changing otherwise of it. So space of each column needs to be changing (#0001) *@
                        <div class="row mt-1 mb-1" style="--bs-gutter-x:0.6rem;">
                        @for (int j = i; j < i + columnAmount; j++)
                        {
                            if (j < productCount)
                            {
                                var product = productsArr[j];

                                <div class="col">
                                    <center>
                                        <img class="img-fluid rounded" src="@product.ImageLink()" alt="@product.Name"
                                            @onclick="(e => (product.HaveModifiers() || product.HaveSizesMoreThanOne())
                                            ? AddProductItemInSelectingProductPageAsync(product.GetItemId())
                                            : AddProductWithoutModifiersForSelectingAmountsForProductsPageAsync(product.ItemId ?? Guid.Empty))" />
                                    </center>
                                    <h6 style="line-height:0.5;margin-top: 5px;">@($"₽{(product.PriceOrDefault().ToString() ?? "???")}")</h6>
                                    <p style="line-height:1;" id="@product.ItemId">@product.Name</p>
                                        <p style="line-height:0.5;color:lightgrey;margin-top:0px;" id="@product.ItemId">@(product.WeightAsString()) г</p>
                                </div>
                            }
                            else
                            {
                                <div class="col"></div>
                            }
                        }
                        </div>

                        <div class="row mb-3" style="--bs-gutter-x:0.6rem;">
                            @for (int j = i; j < i + columnAmount; j++)
                            {
                                if (j < productCount)
                                {
                                    var product = productsArr[j];
                                    <div class="col">
                                        @if (OrderService.PersonalInfoOfOrder.ItemByIdOrDefault(product.GetItemId()) is null)
                                        {
                                            <div class="TlBlr_div TlBlrCounter_x TlBlrDesktopProductCard_footer TlBlrCounter_y">
                                                <button @onclick="(e => AddProductItemInSelectingProductPageAsync(product.GetItemId()))" class="TlBlrCounter_btn TlBlrCounter_onlyIncrement"
                    data-testid="amount-select-increment">
                                                    <span>Добавить</span>
                                                </button>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="TlBlr_div TlBlrCounter_x TlBlrDesctopProductCard TlBlrCounter_y">
                                                <button @onclick="(e => RemoveProductItemInSelectingProductPageAsync(product.GetItemId()))" class="TlBlrCounter_btn TlBlrCounter_decrement"
                    data-testid="amount-select-decrement">
                                                    <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M6 12a1 1 0 0 0 1 1h10a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" fill="currentColor"></path>
                                                    </svg>
                                                </button>
                                                <span>@OrderService.PersonalInfoOfOrder.SelectedTotalAmountByItemId(product.GetItemId())</span>
                                                <button @onclick="(e => AddProductItemInSelectingProductPageAsync(product.GetItemId()))" class="TlBlrCounter_btn TlBlrCounter_increment"
                    data-testid="amount-select-increment">
                                                    <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                        fill="currentColor"></path>
                                                    </svg>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="col"></div>
                                }
                            }
                        </div>                
                    </div>
                }
            }

            // Show the button for to go the shopping cart (only for test)
            if (!OrderService.IsReleaseMode)
            {
                if (OrderService.PersonalInfoOfOrder.HaveSelectedProducts())
                {
                    <div>
                        <center>
                            @*Show button if at least one product is selected*@
                            <a href="#" @onclick="(e => ViewOrderOfTestMode())" data-toggle="modal" data-target="#productModal" class="btn btn-success">Корзина</a>
                        </center>
                    </div>
                }
            }
        }
        // Show the page for:
        // - selecting modifiers
        // - selecting the number of the product
        // - selecting sizes of the product
        // This page is showing the product description and restrictions of the product
        // Notice! #0002
        else if (StateOfPage.PageTypeOfOrder == PageViewType.SelectingModifiersAndAmountsForProduct
        && OrderService.CurrItem is not null && OrderService.CurrProductItem is not null)
        {
            // Info of the selected product with modifiers or sizes
            var item = OrderService.CurrItem;
            var product = OrderService.CurrProductItem;

            <div class="container">
            @* Button for to cancel selected product and to go back in the main page (only for test) *@
            @if (!OrderService.IsReleaseMode)
            {
                <div align="right">
                    <button @onclick="(e => { OrderService.CancelCurrSelectedItemWithModifiers(); StateOfPage.GoBack(); })"
                data-toggle="modal" data-target="#productModal" class="btn btn-link btn-sm btn-text-green">Отмена</button>
                </div>
            }
            <div align="center">
                <img class="img-thumbnail" style="margin-top:5px;margin-bottom:5px;" src="@product.ImageLink()"
                    alt="@product.Name" />
            </div>

            @* Restrictions of the selected product *@
            <h5>@product.Name</h5> <h6 style="color:lightgrey;">@(product.WeightAsString()) г</h6>
                <div class="row" style="--bs-gutter-x:0.6rem;">
                <div class="col">
                    <h5>В 100 граммах</h5>
                        <p>@(product.EnergyAsString()) Ккал · @(product.CarbsAsString()) Углеводы</p>
                </div>
                <div class="col">
                    @* Button for to decrease amount of the selected product *@
                    <div class="TlBlr_div TlBlrCounter_x TlBlrDesctopProductCard TlBlrCounter_y" style="height:48px;">
                        <button @onclick="(e => RemoveProductInSelectingModifiersAndAmountsForProductPageAsync())" class="TlBlrCounter_btn TlBlrCounter_decrement"
    data-testid="amount-select-decrement">
                        <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M6 12a1 1 0 0 0 1 1h10a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" fill="currentColor"></path>
                        </svg>
                        </button>

                        @* Number of the selected product *@
                        <span>@item.Amount</span>

                        @* Button for to increase amount of the selected product *@
                        <button @onclick="(e => AddProductInSelectingModifiersAndAmountsForProductPageAsync())" class="TlBlrCounter_btn TlBlrCounter_increment"
        data-testid="amount-select-increment">
                            <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                fill="currentColor"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            @* Description of the selected product *@
            @if (!string.IsNullOrEmpty(product.Description))
            {
                <h4>Описание</h4>
                <p>@product.Description</p>
            }

            @* Choosing sizes of the selected product *@
            @if (product.HaveSizesMoreThanOne())
            {
                <div style="padding-bottom: 3px;">
                    <h5>Размеры</h5>
                    @{
                        bool isFirst = true;
                    }
                    @foreach (var size in product.ItemSizes!)
                    {
                        <div class="form-check form-check-inline">
                            @if (isFirst)
                            {
                                <input class="form-check-input" type="radio" name="inlineRadioOptions" style="box-shadow:none;"
                                id="@size.SizeId" value="@size.SizeId" @onchange="OnChangingProductSizeAsync" checked>
                                isFirst = false;
                            }
                            else
                            {
                                <input class="form-check-input" type="radio" name="inlineRadioOptions" style="box-shadow:none;"
                                id="@size.SizeId" value="@size.SizeId" @onchange="OnChangingProductSizeAsync">
                            }
                            <label class="form-check-label" for="inlineRadio1">@size.SizeName</label>
                        </div>
                    }
                </div>
            }

            @{
                var modifierGroups = product.ModifierGroups();
            }
            @* Show modifiers groups *@
            @if (modifierGroups is not null)
            {
                foreach (var groupModifier in modifierGroups)
                {
                    <div class="row" style="--bs-gutter-x:0.6rem;">
                        <h5>@groupModifier.Name</h5>
                    </div>
                    @if (groupModifier.Items is not null)
                    {
                        foreach (var modifier in groupModifier.Items)
                        {
                            <div class="row mb-1" style="--bs-gutter-x:0.6rem;">
                                <div class="col-5">

                                    @* Just to add modifier to the selected product *@
                                    @if (!item.IsSelectedModifier(modifier.ItemId ?? Guid.Empty, groupModifier.ItemGroupId))
                                    {
                                        <div class="TlBlr_div TlBlrCounter_x TlBlrDesktopProductCard_footer TlBlrCounter_y">
                                            @if (!item.IsReachedMaxAmountOfGroupModifier(groupModifier.ItemGroupId ?? Guid.Empty, modifier.ItemId ?? Guid.Empty))
                                            {
                                                    <button @onclick="(e => AddModifierInSelectingModifiersAndAmountsForProductPageAsync(modifier.ItemId ?? Guid.Empty, groupModifier.ItemGroupId))"
                                                    class="TlBlrCounter_btn TlBlrCounter_onlyIncrement" data-testid="amount-select-increment">
                                                    <span>Добавить</span>
                                                </button>
                                            }
                                            else
                                            {
                                                <button data-testid="amount-select-increment" class="TlBlrCounter_btn TlBlrCounter_onlyIncrement" disabled>
                                                    <span>Добавить</span>
                                                </button>
                                            }
                                        </div>
                                    }
                                    @* Remove/add modifier to/from the selected product *@
                                    else
                                    {
                                        <div class="TlBlr_div TlBlrCounter_x TlBlrDesctopProductCard TlBlrCounter_y">
                                            <button @onclick="(e => RemoveModifierInSelectingModifiersAndAmountsForProductPageAsync(modifier.ItemId ?? Guid.Empty, groupModifier.ItemGroupId))"
                                                class="TlBlrCounter_btn TlBlrCounter_decrement" data-testid="amount-select-decrement">
                                                <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M6 12a1 1 0 0 0 1 1h10a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" fill="currentColor"></path>
                                                </svg>
                                            </button>
                                            
                                            @if (!item.IsReachedMaxAmountOfGroupModifier(groupModifier.ItemGroupId ?? Guid.Empty, modifier.ItemId ?? Guid.Empty))
                                            {
                                                <span>@(item.AmountOfModifier(modifier.ItemId ?? Guid.Empty, groupModifier.ItemGroupId))</span>
                                                    <button @onclick="(e => AddModifierInSelectingModifiersAndAmountsForProductPageAsync(modifier.ItemId ?? Guid.Empty, groupModifier.ItemGroupId))"
                                                class="TlBlrCounter_btn TlBlrCounter_increment" data-testid="amount-select-increment">
                                                    <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                                fill="currentColor"></path>
                                                    </svg>
                                                </button>
                                            }
                                            else
                                            {
                                                <span style="color:red;">@(item.AmountOfModifier(modifier.ItemId ?? Guid.Empty, groupModifier.ItemGroupId))</span>
                                                    <button data-testid="amount-select-increment" class="TlBlrCounter_btn TlBlrCounter_increment" disabled>
                                                    <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                                fill="currentColor"></path>
                                                    </svg>
                                                </button>  
                                            }
                                        </div>
                                    }

                                </div>

                                @* Price of the modifier *@
                                <div class="col">
                                    @{
                                        var modifierD = item.Modifiers?.FirstOrDefault(x => x.ProductId == modifier.ItemId);
                                    }
                                    <p>@modifierD?.Name</p>
                                    </div>
                                    <div align="right" class="col">
                                    @{
                                        var price = modifier.Price();
                                    }
                                    <p>@(price == 0 ? "Бесплатно" : $"₽{price}")</p>
                                </div>
                            </div>
                        }
                    }
                }
            }

            @* Complete adding the product with modifiers/sizes then to go back in the main page (only for test) *@
            @if (!OrderService.IsReleaseMode)
            {
                <br />
                <div>
                    @* If necessary modifiers has been selected then can go in the main page *@
                    @if (item.IsReachedMinAmountOfGroupModifiers() && item.IsReachedMinAmountOfModifiers())
                    {
                        <button @onclick="(e => StateOfPage.GoBack())" id="@OrderService.CurrItem.ProductId" data-toggle="modal" data-target="#productModal"
                            class="btn btn-success w-100">Добавить ₽@(OrderService.CurrItem.TotalPrice)</button>
                    }
                    else
                    {
                        <button id="@OrderService.CurrItem.ProductId" data-toggle="modal" data-target="#productModal"
                        class="btn btn-success w-100" disabled>Добавить ₽@(OrderService.CurrItem.TotalPrice)</button>
                    }
                </div>
            }
        </div>
        }
        // Show the page for:
        // - selecting the number of the product
        // This page is showing the product description and restrictions of the product
        // Notice! #0003
        else if (StateOfPage.PageTypeOfOrder == PageViewType.SelectingAmountsForProducts
        && OrderService.CurrItem is not null && OrderService.CurrProductItem is not null)
        {
            // Info of the selected product with modifiers or sizes
            var item = OrderService.CurrItem;
            var product = OrderService.CurrProductItem;

            <div class="container">
                @* Button for to cancel selected product and to go back in the main page (only for test) *@
                @if (!OrderService.IsReleaseMode)
                {
                    <div align="right">
                        <button @onclick="(e => StateOfPage.GoBack())" 
            data-toggle="modal" data-target="#productModal" class="btn btn-link btn-sm btn-text-green">Отмена</button>
                    </div>
                }
                <div align="center">
                    <img class="img-thumbnail" style="margin-top:5px;margin-bottom:5px;" src="@product.ImageLink()"
            alt="@product.Name" />
                </div>

                @* Restrictions of the selected product *@
                <h5>@product.Name</h5> <h6 style="color:lightgrey;">@(product.WeightAsString()) г</h6>
                <div class="row" style="--bs-gutter-x:0.6rem;">
                    <div class="col">
                        <h5>В 100 граммах</h5>
                        <p>@(product.EnergyAsString()) Ккал · @(product.CarbsAsString()) Углеводы</p>
                    </div>
                    <div class="col">
                        @* Button for to decrease amount of the selected product *@
                        <div class="TlBlr_div TlBlrCounter_x TlBlrDesctopProductCard TlBlrCounter_y" style="height:48px;">
                            <button @onclick="(e => RemoveProductWithoutModifiersInSelectingAmountsForProductsPageAsync())" class="TlBlrCounter_btn TlBlrCounter_decrement"
            data-testid="amount-select-decrement">
                                <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M6 12a1 1 0 0 0 1 1h10a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" fill="currentColor"></path>
                                </svg>
                            </button>

                            @* Number of the selected product *@
                            <span>@item.Amount</span>

                            @* Button for to increase amount of the selected product *@
                            <button @onclick="(e => AddProductWithoutModifiersInSelectingAmountsForProductsPageAsync())" class="TlBlrCounter_btn TlBlrCounter_increment"
            data-testid="amount-select-increment">
                                <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                    fill="currentColor"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>     

                @* Description of the selected product *@
                @if (!string.IsNullOrEmpty(product.Description))
                {
                    <h4>Описание</h4>
                    <p>@product.Description</p>
                }

                @* Complete adding the product then to go back in the main page (only for test) *@
                @if (!OrderService.IsReleaseMode)
                {
                    <br />
                    <div>
                        <button @onclick="(e => StateOfPage.GoBack())" id="@item.ProductId" data-toggle="modal" data-target="#productModal"
            class="btn btn-success w-100">Добавить</button>
                    </div>
                }
            </div>
        }
        // Show the page for:
        // - changing the number of the products with sample IDs wich have modifiers/sizes
        // - empty selected positions
        // Notice! #0004
        else if (StateOfPage.PageTypeOfOrder == PageViewType.ChangingSelectedProductsWithModifiers
        && OrderService.CurrentProduct is not null && OrderService.CurrProductItem is not null)
        {
            // To separate positions in this page
            bool hr = false;
            // Choose positions by only the product which being modified
            var items = OrderService.PersonalInfoOfOrder.CurrItems().Where(x => x.ProductId == OrderService.CurrentProduct.GetProductId());
            // Information about the product which being modified
            var product = OrderService.CurrProductItem;
            // Final sum of selected positions
            double totalSum = 0;

            <br />
            @if (items is not null && product is not null)
            {
                foreach (var item in items)
                {
                    if (hr)
                    {
                        <hr style="color:lightgrey;" />
                    }
                    else
                    {
                        hr = true;
                    }

                    <div class="row" style="--bs-gutter-x:0.6rem;">
                        <div class="col">
                            <img class="img-fluid rounded" src="@product!.ImageLink()" alt="@item.ProductName" />
                        </div>
                        <div class="col-6">
                            @{
                                // Get product name and size name if there is one
                                var sizeName = item.ProductSizeId is not null ? product!.ItemSizes?.FirstOrDefault(x => x.SizeId == item.ProductSizeId)?.SizeName
                                    : product!.HaveSizesMoreThanOne() ? product.ItemSizes?.FirstOrDefault()?.SizeName : null;
                            }

                            @* Product and size name *@
                            <p>@item.ProductName @sizeName</p>

                            @* Modifier names *@
                            @foreach (var modifier in item.SelectedModifiers())
                            {
                                <p> • @modifier.Name x@(modifier.Amount)</p>
                            }

                            @* Change the number of position *@
                            <div style="display: flex;">
                                <button @onclick="(e => RemoveProductItemInChangingSelectedProductsWithModifiersPageAsync(item.ProductId, item.PositionId ?? Guid.Empty))"
                                    data-toggle="modal" data-target="#productModal" class="btn btn-light" style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                    -
                                </button>
                                <p style="padding-left:10px;padding-right:10px;margin-bottom:0;margin-top:3%;">@(item.Amount) шт</p>
                                <button @onclick="(e => AddProductItemInChangingSelectedProductsWithModifiersPageAsync(item.ProductId, item.PositionId ?? Guid.Empty))"
                                    data-toggle="modal" data-target="#productModal" class="btn btn-light" style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                    +
                                </button>
                            </div>
                        </div>

                        @* Calculate total sum *@
                        <div align="right" class="col-2">
                            @{    
                                totalSum += item.TotalPrice ?? 0;           
                            }
                            <p>₽@totalSum</p>
                        </div>
                    </div>
                }
            }
        <h5 align="right" style="margin-top:20px;margin-bottom:5px;">Итого: ₽@totalSum</h5>

        @* Empty all selected positions and to go in the main page *@
        <br />
        <center>
            <button @onclick="(e => CancelCurrSimilarSelectedItemsWithModifiersAsync())" style="background-color:rgba(28,28,28,0);outline:none;border:0;width:42px;height:32px;">
                <svg xmlns="http://www.w3.org/2000/svg" class="Trash" viewBox="0 0 16 18.286" width="16" height="18.286">
                    <path d="M1.143 16.571a1.714 1.714 0 0 0 1.714 1.714h10.286a1.714 1.714 0 0 0 1.714 -1.714V4.571H1.143zm9.714 -9.143a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zM15.429 1.143H11.143l-0.336 -0.668A0.857 0.857 0 0 0 10.039 0H5.957a0.847 0.847 0 0 0 -0.764 0.475L4.857 1.143H0.571A0.571 0.571 0 0 0 0 1.714v1.143a0.571 0.571 0 0 0 0.571 0.571h14.857a0.571 0.571 0 0 0 0.571 -0.571V1.714a0.571 0.571 0 0 0 -0.571 -0.571z"></path>
                </svg>
            </button>
        </center>
        }
        // Show the page for:
        // - changing the number for whole selected products and positions
        // - empty selected products and positions
        // - using coupons 
        // - spending bonuses
        // - selecting type of the delivery method
        // - filling in the address
        // - selecting the place of pickup
        // - adding a comment
        // - This page is showing selected products and positions wiht amounts, choosen modifiers and sizes, prices.
        // Final pay sum with discount procent too. Delivery method with typed address
        // Notice! #0005
        else if (StateOfPage.PageTypeOfOrder == PageViewType.ShoppingCart)
        {   
            <div class="container-fluid">
                @* Just to show 'Trash' for a test *@
                @if (!OrderService.IsReleaseMode)
                {
                    <div class="row mt-1 mb-2" style="--bs-gutter-x:0.6rem;">
                        <div class="col">
                            <h1>Ваш заказ</h1>
                        </div>
                        <div align="right" class="col" style="padding-right:0px;padding-left:0px;">
                            <button style="background-color:rgba(28,28,28,0);outline:none;border:0;width:42px;height:32px;">
                                <svg xmlns="http://www.w3.org/2000/svg" class="Trash" viewBox="0 0 16 18.286" width="16" height="18.286">
                                    <path d="M1.143 16.571a1.714 1.714 0 0 0 1.714 1.714h10.286a1.714 1.714 0 0 0 1.714 -1.714V4.571H1.143zm9.714 -9.143a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zM15.429 1.143H11.143l-0.336 -0.668A0.857 0.857 0 0 0 10.039 0H5.957a0.847 0.847 0 0 0 -0.764 0.475L4.857 1.143H0.571A0.571 0.571 0 0 0 0 1.714v1.143a0.571 0.571 0 0 0 0.571 0.571h14.857a0.571 0.571 0 0 0 0.571 -0.571V1.714a0.571 0.571 0 0 0 -0.571 -0.571z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                }
                @* Call the method to empty shopping cart *@
                else
                {
                    <div class="row mt-1 mb-2" style="--bs-gutter-x:0.6rem;">
                        <div class="col">
                            <h1>Ваш заказ</h1>
                        </div>
                        <div align="right" class="col" style="padding-right:0px;padding-left:0px;">
                            <button @onclick="(e => RemoveAllSelectedProductsInShoppingCartAsync())" style="background-color:rgba(28,28,28,0);outline:none;border:0;width:42px;height:32px;">
                                <svg xmlns="http://www.w3.org/2000/svg" class="Trash" viewBox="0 0 16 18.286" width="16" height="18.286">
                                    <path d="M1.143 16.571a1.714 1.714 0 0 0 1.714 1.714h10.286a1.714 1.714 0 0 0 1.714 -1.714V4.571H1.143zm9.714 -9.143a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zM15.429 1.143H11.143l-0.336 -0.668A0.857 0.857 0 0 0 10.039 0H5.957a0.847 0.847 0 0 0 -0.764 0.475L4.857 1.143H0.571A0.571 0.571 0 0 0 0 1.714v1.143a0.571 0.571 0 0 0 0.571 0.571h14.857a0.571 0.571 0 0 0 0.571 -0.571V1.714a0.571 0.571 0 0 0 -0.571 -0.571z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                }

                @{
                    // To separate positions in this page
                    bool hr = false;
                }

                @* Show contents of the shopping cart *@
                @if (OrderService.PersonalInfoOfOrder.Items is not null)
                {
                    foreach (var item in OrderService.PersonalInfoOfOrder.Items)
                    {
                        var product = OrderService.GeneralInfoOfOnlineStore.ProductById(item.ProductId);

                        if (hr)
                        {
                            <hr style="color:lightgrey;" />
                        }
                        else
                        {
                            hr = true;
                        }

                        // Get a size name of the position
                        var sizeName = item.ProductSizeId is not null ? product.ItemSizes?.FirstOrDefault(x => x.SizeId == item.ProductSizeId)?.SizeName
                        : product.HaveSizesMoreThanOne() ? product.ItemSizes?.FirstOrDefault()?.SizeName : null;

                        // Show the position with modifiers
                        if (item.HaveModifiers())
                        {
                            <div class="row" style="--bs-gutter-x:0.6rem;">
                                <div class="col">
                                    <img class="img-fluid rounded" src="@product.ImageLink()" alt="@item.ProductName" />
                                </div>
                                <div class="col-6">
                                    <p>@item.ProductName @sizeName</p>
                                    @foreach (var modifier in item.SelectedModifiers())
                                    {
                                        <p> • @modifier.Name x@(modifier.Amount)</p>
                                    }
                                    <div style="display: flex;">
                                        <button @onclick="(e => RemoveProductItemInShoppingCartPageAsync(item.ProductId, item.PositionId))" data-toggle="modal" data-target="#productModal" class="btn btn-light"
    style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                            -
                                        </button>
                                        <p style="padding-left:10px;padding-right:10px;margin-bottom:0;margin-top:3%;">@(item.Amount) шт</p>
                                        <button @onclick="(e => AddProductItemInShoppingCartPageAsync(item.ProductId, item.PositionId))" data-toggle="modal" data-target="#productModal" class="btn btn-light"
    style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                            +
                                        </button>
                                    </div>
                                </div>

                                @* 100% discount on one of these items is displayed *@
                                <div align="right" class="col-2">
                                    @{
                                        var totalSum = item.TotalPrice;
                                        var freeItems = OrderService.PersonalInfoOfOrder.DiscountFreeItems?.Where(id => id == item.PositionId);
                                    }

                                    @if (freeItems is not null && freeItems.Any())
                                    {
                                        double discountSum = 0;
                                        foreach (var freeItem in freeItems)
                                        {
                                            discountSum += item.Price ?? 0;
                                        }
                                        <del>₽@totalSum</del>
                                        <p>₽@(totalSum - discountSum)</p>
                                    }
                                    else
                                    {
                                        <p>₽@totalSum</p>
                                    }

                                </div>
                            </div>
                        }
                        // Show the position without modifiers
                        else
                        {
                            <div class="row" style="--bs-gutter-x:0.6rem;">
                                <div class="col">
                                    <img class="img-fluid rounded" src="@product.ImageLink()" alt="@item.ProductName" />
                                </div>
                                <div class="col-6">
                                    <p>@item.ProductName @sizeName</p>
                                    <div style="display: flex;">
                                        <button @onclick="(e => RemoveProductItemInShoppingCartPageAsync(item.ProductId, item.PositionId))" data-toggle="modal" data-target="#productModal" class="btn btn-light"
                                            style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                            -
                                        </button>
                                        <p style="padding-left:10px;padding-right:10px;margin-bottom:0;margin-top:3%;">@(item.Amount) шт</p>
                                        <button @onclick="(e => AddProductItemInShoppingCartPageAsync(item.ProductId, item.PositionId))" data-toggle="modal" data-target="#productModal" class="btn btn-light"
                                            style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                            +
                                        </button>
                                    </div>
                                </div>

                                @* 100% discount on one of these items is displayed *@
                                <div align="right" class="col-2">
                                    @{
                                        var freeItems = OrderService.PersonalInfoOfOrder.DiscountFreeItems?.Where(id => id == item.PositionId);
                                    }

                                    @if (freeItems is not null && freeItems.Any())
                                    {
                                        double discountSum = 0;
                                        foreach (var freeItem in freeItems)
                                        {
                                            discountSum += item.Price ?? 0;
                                        }
                                        <del>₽@(item.Price * item.Amount)</del>
                                        <p>₽@(item.Price * item.Amount - discountSum)</p>
                                    }
                                    else
                                    {
                                        <p>₽@(item.Price * item.Amount)</p>
                                    }
                                </div>
                            </div>
                        }
                    }
                }

                @* Show free items *@
                @if (OrderService.PersonalInfoOfOrder.FreeItems is not null)
                {
                    foreach (var item in OrderService.PersonalInfoOfOrder.FreeItems)
                    {
                        var product = OrderService.GeneralInfoOfOnlineStore.ProductById(item.ProductId);

                        <hr style="color:lightgrey;" />
                        <div class="row" style="--bs-gutter-x:0.6rem;">
                            <div class="col">
                                <img class="img-fluid rounded" src="@product.ImageLink()" alt="@product.Name" />
                            </div>
                            <div class="col-6">
                                <p>@item.ProductName</p>
                            </div>
                            <div align="right" class="col-2">
                                <p>🎁</p>
                            </div>
                        </div>
                    }
                }
            </div>
            <br />

            @* Show the discount amount *@
            @if (OrderService.PersonalInfoOfOrder.DiscountSum > 0)
            {
                var discountProcent = OrderService.PersonalInfoOfOrder.DiscountProcent;
                bool isInteger = (int)(discountProcent * 100 % 100) == 0;
                <h5 style="margin-top:5px;">Скидка: -@(isInteger ? $"{discountProcent:f0}" : $"{discountProcent:f2}")%</h5>

                <div class="row mb-2" style="--bs-gutter-x:0.6rem;">
                    <div class="col">
                        <h5>Итого:</h5>
                    </div>
                    <div class="col" style="flex:0 0 auto;width:80%;">
                        <h6 align="left" style="padding-top:5px;"><del>₽@OrderService.PersonalInfoOfOrder.TotalSum</del></h6>
                        <h6 align="left">₽@(OrderService.PersonalInfoOfOrder.FinalSum)</h6>
                    </div>
                </div>
            }

            @* Using the coupon *@
            @if (OrderService.GeneralInfoOfOnlineStore.UseCoupon && OrderService.IsLoyaltyProgramAvailableForProcess)
            {
                <div class="row" style="padding-bottom:5px;--bs-gutter-x:0.6rem;">
                        <div class="col">
                        <input class="comment" type="text" name="Coupon" placeholder="Введите промокод" @bind="@OrderService.PersonalInfoOfOrder.Coupon" />
                    </div>
                    <div class="col">
                        <button @onclick="CalculateLoyaltyProgramByCouponAsync" class="btn btn-light TlBlrCouponApply" style="box-shadow:none;background-color:#F5F4F2;height:100%;">
                            <span>Применить</span>
                        </button>
                    </div>
                </div>
            }

            @* The ability to use bonuses under certain conditions *@
            if (OrderService.PersonalInfoOfOrder.WalletBalance > 0 && OrderService.PersonalInfoOfOrder.AllowedWalletSum > 0 && OrderService.IsLoyaltyProgramAvailableForProcess)
            {
                <h5>Бонусные баллы</h5>
                @* Notice! Depending on the balance, change the word "balance" (#0005) *@
                <h6 style="padding-bottom: 3px;">У Вас накоплено @(OrderService.PersonalInfoOfOrder.WalletBalance) баллов</h6>
                <div class="row" style="--bs-gutter-x:0.6rem;padding-bottom: 5px;">
                    <div class="col-6" style="position:relative;">
                        <input type="range" class="form-range" style="margin:0;position:absolute;top:50%;left:50%;margin-right:-50%;transform:translate(-50%,-50%);
    padding-left:10px;padding-right:10px;"
               min="0" max="@(OrderService.PersonalInfoOfOrder.AllowedWalletSum)" id="customRangeForWalletBalance" value="@OrderService.PersonalInfoOfOrder.SelectedWalletSum"
                            @oninput="OnChangeAllowedWalletSum">
                    </div>
                    <div class="col-2" style="position:relative;">
                        <h5 style="margin:0;position:absolute;top:50%;left:50%;margin-right:-50%;transform:translate(-50%,-50%);">@(OrderService.PersonalInfoOfOrder.SelectedWalletSum)</h5>
                    </div>
                </div>
            }

            <div>
                <h5>Способ доставки</h5>
            </div>
            @* Filling in the delivery address *@
            @if (OrderService.PersonalInfoOfOrder.ByCourier)
            {
                var address = OrderService.PersonalInfoOfOrder.Address!;
                var city = address.City;
                var street = address.Street;
                var house = address.House;
                var flat = address.Flat;
                var entrance = address.Entrance;
                var floor = address.Floor;

                @* Choosing a delivery method *@
                <div class="btn-group" role="group" aria-label="Delivery type">
                    <button type="button" @onclick="(e => ChangeDeliveryTypeFlagAsync(true))" data-toggle="modal" data-target="#productModal" class="btn btn-success disabled">Доставка</button>
                    <button type="button" @onclick="(e => ChangeDeliveryTypeFlagAsync(false))" data-toggle="modal" data-target="#productModal" class="btn btn-secondary"
                        style="background-color:#c2c9cf;border-color: #c2c9cf;">Самовывоз</button>
                </div>

                <input class="comment" type="text" name="City" placeholder="Город" value="@city"
       @oninput="(e => { var res = e.Value.ToString(); OrderService.PersonalInfoOfOrder.Address!.City = res is null ? OrderService.PersonalInfoOfOrder.Address!.City : res; })" />
                <input class="comment" type="text" name="Street" placeholder="Улица" value="@street"
       @oninput="(e => { var res = e.Value.ToString(); OrderService.PersonalInfoOfOrder.Address!.Street = res is null ? OrderService.PersonalInfoOfOrder.Address!.Street : res; })" />
                <div style="display: flex;">
                    <input class="comment" style="width:49%;" type="text" name="House" placeholder="Дом" value="@house"
                    @oninput="(e => { var res = e.Value.ToString(); OrderService.PersonalInfoOfOrder.Address!.House = res is null ? OrderService.PersonalInfoOfOrder.Address!.House : res; })" />
                    <input class="comment" style="width:49%;margin-left:auto;margin-right:0em;" type="text" name="Flat" placeholder="Квартира" value="@flat"
           @oninput="(e => { var res = e.Value.ToString(); OrderService.PersonalInfoOfOrder.Address!.Flat = res is null ? OrderService.PersonalInfoOfOrder.Address!.Flat : res; })" />
                </div>
                <div style="display: flex;">
                    <input class="comment" style="width:49%;" type="text" name="Entrance" placeholder="Подъезд" value="@entrance"
           @oninput="(e => { var res = e.Value.ToString(); OrderService.PersonalInfoOfOrder.Address!.Entrance = res is null ? OrderService.PersonalInfoOfOrder.Address!.Entrance : res; })" />
                    <input class="comment" style="width:49%;margin-left:auto;margin-right:0em;" type="text" name="Floor" placeholder="Этаж" value="@floor"
           @oninput="(e => { var res = e.Value.ToString(); OrderService.PersonalInfoOfOrder.Address!.Floor = res is null ? OrderService.PersonalInfoOfOrder.Address!.Floor : res; })" />
                </div>
            }
            @* Choosing the pickup address *@
            else
            {
                @* Choosing a delivery method *@
                <div class="btn-group" role="group" aria-label="Delivery type">
                    <button @onclick="(e => ChangeDeliveryTypeFlagAsync(true))" data-toggle="modal" data-target="#productModal" class="btn btn-secondary"
                        style="background-color:#c2c9cf;border-color: #c2c9cf;">
                        Доставка
                    </button>
                    <button @onclick="(e => ChangeDeliveryTypeFlagAsync(false))" data-toggle="modal" data-target="#productModal" class="btn btn-success disabled">Самовывоз</button>
                </div>

                <div style="margin-top:10px;">
                    <select class="form-select" style="box-shadow:none;" aria-label="Default select example" @onchange="@OnSelectTerminalAsync">
                        @{
                            var delTerminal = OrderService.PersonalInfoOfOrder.DeliveryTerminal;
                            if (delTerminal is null && OrderService.PersonalInfoOfOrder.TerminalId is not null && OrderService.PersonalInfoOfOrder.TerminalId != Guid.Empty)
                            {
                                delTerminal = OrderService.GeneralInfoOfOnlineStore.DeliveryTerminals?.FirstOrDefault(x => x.Id == OrderService.PersonalInfoOfOrder.TerminalId);
                            }
                        }
                        @if (delTerminal is not null)
                        {
                            <option id="@delTerminal.Id" selected>@(delTerminal.Name)</option>
                        }
                        else
                        {
                            <option selected>Выберите улицу</option>
                        }

                        @if (OrderService.GeneralInfoOfOnlineStore.DeliveryTerminals is not null)
                        {
                            foreach (var terminal in OrderService.GeneralInfoOfOnlineStore.DeliveryTerminals)
                            {
                                <option value="@terminal.Id">@terminal.Name</option>
                            }
                        }
                    </select>
                </div>
            }

            @* Comment field *@
            <input class="comment" type="text" name="Comment" placeholder="Ваш комментарий..." @bind="@OrderService.PersonalInfoOfOrder.Comment"/>

            @* A button to pay order (only for test) *@
            <div>
                <br/>
                @if (!OrderService.IsReleaseMode)
                {
                    <central>
                        @*The button for to pay the created order if the page isn't going to open in the Telegram app*@
                        @if (OrderService.PersonalInfoOfOrder.TotalSum < OrderService.GeneralInfoOfOnlineStore.CurrOfRub)
                        {
                            <button data-toggle="modal" data-target="#productModal" class="btn btn-success" disabled>Pay ₽@(OrderService.PersonalInfoOfOrder.TotalSum)</button>
                        }
                        else
                        {
                            var sum = OrderService.PersonalInfoOfOrder.FinalSum;
                            <button @onclick="(e => PayOrderForTestAsync())" data-toggle="modal" data-target="#productModal" class="btn btn-success">Оплатить ₽@(sum)</button>
                        }
                    </central>
                }
            </div>
        }
        // Show information about the created order
        else if (StateOfPage.PageTypeOfOrder == PageViewType.InfoAboutCreatedOrder && !OrderService.IsReleaseMode)
        {
            <p>@OrderService.InfoAboutCreatedOrderForTest()</p>
        }
    }
}
@* Waiting for the necessary data to be loaded from the API server *@
else {
    @* Show the preloader *@
    <div class=container4>
        <div class="dots-bars-2"></div>
    </div>
}

@code {
    // Responsible for all operations and calculations on orders, there is also a connection with the API server from where all necessary data is taken
    private IOnlineStoreService? OrderService { get; set; }
    // This interface responsible for interacting with the Telegram interface using JavaScript language
    private ITwaNet? TwaNet { get; set; }
    // The interface that facilitates interaction with JavaScript language
    private IJsHelperService? JsHelperService { get; set; }
    // Responsible for states and statuses of this Web App
    private StateOfPage? StateOfPage { get; set; }
    // Test chat ID, it's mine;)
    private long TestChatId { get; } = 2098619539;
    // Flag indicating completion of data loading from the API server
    private bool IsLoadedGeneralInfo { get; set; } = false;


    // Initialization of this page
    protected override async Task OnInitializedAsync()
    {
        StateOfPage = new StateOfPage();

        try
        {
            JsHelperService = new JsHelperService();
            TwaNet = new TwaNet();
            // Get chat ID from the Telegram
            var chatId = await TwaNet.TwaNetInitAsync(JsRuntime);
            OrderService = new OnlineStoreService(Http);
            // Retrive general data and personal data by chat ID from API server and initialize this service
            await OrderService.InitOnlineStoreServiceAsync(chatId, OrderControllerPaths.RetrieveMainInfoForWebAppOrder);
            // Set a color button that has been received from API server
            await TwaNet.SetMainBtnColorAsync(JsRuntime, OrderService.TlgMainBtnColor);
            // Downloading necessary data and initializing all modeles for the operation this Web App is finished
            IsLoadedGeneralInfo = true;
            // Render the page
            StateHasChanged();

            // Show the main button if there are selected items in the order
            if (OrderService.HaveSelectedProductsAtFirst())
            {
                // Notice! #0006
                var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                await TwaNet.SetMainButtonTextAsync(JsRuntime, btnText);
            }
            // Listen the main and back buttons by click
            await ListenTwaBtnsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            // Catch it in the test mode
            if (ex.Message.Contains("Cannot read properties of undefined (reading 'id')"))
            {
                try
                {
                    OrderService = new OnlineStoreService(Http);
                    await OrderService.InitOnlineStoreServiceAsync(TestChatId, OrderControllerPaths.RetrieveMainInfoForWebAppOrder);
                }
                catch (Exception iex)
                {
                    Console.WriteLine(iex.Message);
                }
            }
            else
            {
                // There are unacceptable errors, any actions in this page is impossible
                StateOfPage.SetErrorStateForWebApp();
            }
        }
        finally
        {
            IsLoadedGeneralInfo = true;
        }
    }

    // Adds the choosen group ID like a main group among others
    private async Task AddCurrentGroupId(Guid id)
    {
        // Any actions in the page is forbidden
        if (StateOfPage!.IsPageBlocked) return;

        try
        {
            OrderService!.CurrentGroupId = id;
            // Available to use the Telegram WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in a Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            StateOfPage.SetErrorStateForWebApp();
        }
    }

    // Adds a position by product ID
    private async Task AddProductItemInSelectingProductPageAsync(Guid productId)
    {
        try
        {
            // Any actions in the page is forbidden
            if (StateOfPage!.IsPageBlocked) return;

            // Available to use the Telegram WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            else if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in a Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
            }

            // Add position or increase amount of the product, get back an item info
            var productInfo = await OrderService!.AddOrIncreaseItemPositionForSelectingProductPageAsync(productId);
            // Get a general info about a product by ID
            var product = OrderService.GeneralInfoOfOnlineStore.ProductById(productId);

            if (OrderService.IsReleaseMode)
            {
                if (product.HaveModifiersOrSeveralSizes())
                {
                    // Go to the page view where can be choosen the number of positions, modifiers and sizes
                    StateOfPage.GoToPage(PageViewType.SelectingModifiersAndAmountsForProduct);
                    // Text of the Tg (Telegram) main button for the next page view
                    var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingModifiersAndAmountsForProduct;
                    // Add to the text the total cost of the selected product with modifiers and sizes
                    btnText = string.Format(btnText, productInfo.TotalSumOfSelectedProductWithModifiers());
                    // Display the done text on the Tg main button
                    await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
                    // Show the Tg button to go back
                    await TwaNet.ShowBackButtonAsync(JsRuntime);
                }
                // Show the Tg main button if at least one position has been selected 
                else if (productInfo.IsFirstSelected)
                {
                    // Text of the Tg main button for the current page view
                    var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
                }
            }
            else if (product.HaveModifiersOrSeveralSizes())
            {
                StateOfPage.GoToPage(PageViewType.SelectingModifiersAndAmountsForProduct);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Removes a position by product ID / change the number of product positions (more than one position) that has modifiers or sizes
    private async Task RemoveProductItemInSelectingProductPageAsync(Guid productId)
    {
        try
        {
            // Any actions in the page is forbidden
            if (StateOfPage!.IsPageBlocked) return;

            // Available to use the Telegram WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            else if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in a Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
            }

            // Get a general info about a product by ID
            var product = OrderService!.GeneralInfoOfOnlineStore.ProductById(productId, OrderService.CurrentGroupId);

            if (OrderService!.IsReleaseMode)
            {
                if (product.HaveModifiersOrSeveralSizes())
                {
                    // If the number of positions is more than one, the 'true' flag is returned, otherwise the number of product positions is
                    // simply decreased
                    if ((await OrderService.RemoveOrDecreaseItemPositionWithModifiersOrSizesForSelectingProductPageAsync(product)))
                    {
                        // Go to the page view where can be changed the number of product positions
                        StateOfPage!.GoToPage(PageViewType.ChangingSelectedProductsWithModifiers);
                        // Text of the Tg main button for the next page view
                        var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().ChangingSelectedProductsWithModifiers;
                        // Display the done text on the Tg main button
                        await TwaNet!.ShowBackButtonAsync(JsRuntime);
                        // Show the Tg button to go back
                        await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
                    }
                }
                else
                {
                    // Decrease the number of product position
                    await OrderService!.RemoveOrDecreaseItemPositionForSelectingProductPageAsync(product);       
                    // If there are no selected products, then to hide the Tg main button
                    if (!OrderService.PersonalInfoOfOrder.HaveSelectedProducts())
                    {
                        await TwaNet!.HideMainButtonAsync(JsRuntime);
                    }
                }
            }
            else
            {
                if (product.HaveModifiersOrSeveralSizes())
                {
                    // If the number of positions is more than one, the 'true' flag is returned, otherwise the number of product positions is
                    // simply decreased
                    if ((await OrderService.RemoveOrDecreaseItemPositionWithModifiersOrSizesForSelectingProductPageAsync(product)))
                    {
                        // Go to the page view where can be changed the number of product positions
                        StateOfPage!.GoToPage(PageViewType.ChangingSelectedProductsWithModifiers);
                    }
                }
                else
                {
                    // Decrease the number of product position
                    await OrderService!.RemoveOrDecreaseItemPositionForSelectingProductPageAsync(product);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Increases the number of product position in the shopping cart. If a loaylty program is used, then also a discount is calculated
    // when increasing position
    private async Task AddProductItemInShoppingCartPageAsync(Guid productId, Guid? positionId = null)
    {
        try
        {
            // Any actions in the page is forbidden
            if (StateOfPage!.IsPageBlocked) return;

            // Available to use the Telegram WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in a Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
                // Display a loading indicator on the Tg main button
                await TwaNet!.ShowProgressAsync(JsRuntime);
                // Increase the number of product position and if a loaylty program is used then can caluculate that
                await OrderService!.IncreaseItemPositionForShoppingCartPageAsync(JsRuntime, TwaNet!, productId, positionId);

                // Text of the Tg main button that shows the amount to be paid
                var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().ShoppingCart;
                // Add to the text the total cost of the selected products and discounts
                btnText = string.Format(btnText, OrderService!.FinalSumOfOrder());
                // Hide a loading indicator on the Tg main button
                await TwaNet!.HideProgressAsync(JsRuntime);
                // Show the resulting text on the Tg main button
                await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
            }
            // Increase the number of product position and if a loaylty program is used then can caluculate that
            else await OrderService!.IncreaseItemPositionForShoppingCartPageAsync(productId, positionId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.HideProgressAsync(JsRuntime);
            }
        }
    }

    // Decreases the number of product position in the shopping cart. If a loaylty program is used, then also a discount is calculated
    // when increasing position. If no products is remained in the shopping cart, then go back to the main page view
    private async Task RemoveProductItemInShoppingCartPageAsync(Guid productId, Guid? positionId = null)
    {
        try
        {
            // Any actions in the page is forbidden
            if (StateOfPage!.IsPageBlocked) return;

            // Available to use the Telegram WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in a Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
                // Display a loading indicator on the Tg main button
                await TwaNet!.ShowProgressAsync(JsRuntime);

                // If after decreasing the number of product positions there are none left, then remove this product position.
                // Also, if there are no products left in the shopping cart, then get back to the main page view.
                // If a loaylty program is used then can caluculate that
                if ((await OrderService!.RemoveOrDecreaseItemPositionForShoppingCartPageAsync(JsRuntime, TwaNet!, productId, positionId)) is null &&
                !OrderService.PersonalInfoOfOrder.HaveSelectedProducts())
                {
                    // Go back to the preview page
                    StateOfPage.GoBack();
                    // Hide the Tg back button
                    await TwaNet!.HideBackButtonAsync(JsRuntime);
                    // Hide the Tg main button
                    await TwaNet!.HideMainButtonAsync(JsRuntime);
                }
                else
                {
                    // Text of the Tg main button that shows the amount to be paid
                    var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().ShoppingCart;
                    // Add to the text the total cost of the selected products and discounts
                    btnText = string.Format(btnText, OrderService!.FinalSumOfOrder());
                    // Show the resulting text on the Tg main button
                    await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
                }
                // Hide a loading indicator on the Tg main button
                await TwaNet!.HideProgressAsync(JsRuntime);
            }
            // If after decreasing the number of product positions there are none left, then remove this product position.
            // Also, if there are no products left in the shopping cart, then get back to the main page view.
            // If a loaylty program is used then can caluculate that
            else if ((await OrderService!.RemoveOrDecreaseItemPositionForShoppingCartPageAsync(productId, positionId)) is null &&
                !OrderService.PersonalInfoOfOrder.HaveSelectedProducts())
            {
                StateOfPage.GoBack();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.HideProgressAsync(JsRuntime);
            }
        }
    }

    // Increase the number of product position in the 'ChangingSelectedProductsWithModifiers' page view
    private async Task AddProductItemInChangingSelectedProductsWithModifiersPageAsync(Guid productId, Guid positionId)
    {
        try
        {
            // Available to use the Telegram WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in a Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
            }

            // Increase the number of product position by product and position ID
            await OrderService!.IncreaseItemPositionWithModifiersOrSizesForChangingSelectedProductsWithModifiersPageAsync(productId, positionId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Increases the number of product position in the 'ChangingSelectedProductsWithModifiers' page view.
    // If there are no product positions left, then go back to the main page veiw
    private async Task RemoveProductItemInChangingSelectedProductsWithModifiersPageAsync(Guid productId, Guid positionId)
    {
        try
        {
            // Available to use the Telegram WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in a Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);

                // If after decreasing the number of product positions by product and position ID there are none left, then remove this product position
                if ((await OrderService!.RemoveOrDecreaseItemPositionWithModifiersOrSizesForChangingSelectedProductsWithModifiersPageAsync(productId, positionId)) is null)
                {
                    // If there are no product positions left by product ID, then go back to the main page view
                    if (!OrderService.PersonalInfoOfOrder.CurrItems().Where(x => x.ProductId == productId).Any())
                    {
                        // Go back to the preview page
                        StateOfPage!.GoBack();
                        // Hide the back button of Tg
                        await TwaNet.HideBackButtonAsync(JsRuntime);

                        // If there are any selected products left, then show the Tg's main button of the main page view
                        if (OrderService.PersonalInfoOfOrder.HaveSelectedProducts())
                        {
                            // Text of Tg's main button of the main page view
                            var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                            // Show the resulting text on the button
                            await TwaNet.SetMainButtonTextAsync(JsRuntime, btnText);
                        }
                        else
                        {
                            // Hide Tg's main button
                            await TwaNet.HideMainButtonAsync(JsRuntime);
                        }
                    }
                }
            }
            else
            {
                // If after decreasing the number of product positions by product and position ID there are none left, then remove this product position
                if ((await OrderService!.RemoveOrDecreaseItemPositionWithModifiersOrSizesForChangingSelectedProductsWithModifiersPageAsync(productId, positionId)) is null)
                {
                    if (!OrderService.PersonalInfoOfOrder.CurrItems().Where(x => x.ProductId == productId).Any())
                    {
                        StateOfPage!.GoBack();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Increases the modifier's number position of the current product position in the 'SelectingModifiersAndAmountsForProduct' page view
    private async Task AddModifierInSelectingModifiersAndAmountsForProductPageAsync(Guid modifierId, Guid? modifierGroupId = null)
    {
        try
        {
            // Available to use the Telegram WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in a Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
                // Increase the modifiers's number position
                var item = OrderService!.IncreaseModifierItemPositionForSelectingModifiersAndAmountsForProductPageAsync(modifierId, modifierGroupId);
                // Text of Tg's main button that shows the amount to be added
                var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingModifiersAndAmountsForProduct;
                // Add to the text the total cost of the seleted product positions and modifiers
                btnText = string.Format(btnText, item.TotalPrice);
                // Show the resulting text on the button
                await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
            }
            else
            {
                // Increase the modifiers's number position
                OrderService!.IncreaseModifierItemPositionForSelectingModifiersAndAmountsForProductPageAsync(modifierId, modifierGroupId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Decreases the modifier's number position of the current product position in the 'SelectingModifiersAndAmountsForProduct' page view
    private async Task RemoveModifierInSelectingModifiersAndAmountsForProductPageAsync(Guid modifierId, Guid? modifierGroupId = null)
    {
        try
        {
            // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
                // Decrease the modifier's number position
                var item = OrderService!.DecreaseModifierItemPositionForSelectingModifiersAndAmountsForProductPageAsync(modifierId, modifierGroupId);
                // Text of Tg's main button that shows the amount to be added
                var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingModifiersAndAmountsForProduct;
                // Add to the text the total cost of the selected product positions and modifiers
                btnText = string.Format(btnText, item.TotalPrice);
                // Show the resulting text on the button
                await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
            }
            else
            {
                // Decrease the modifier's number position
                OrderService!.DecreaseModifierItemPositionForSelectingModifiersAndAmountsForProductPageAsync(modifierId, modifierGroupId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Increase the current product's number position in the 'SelectingModifiersAndAmountsForProduct' page view
    private async Task AddProductInSelectingModifiersAndAmountsForProductPageAsync()
    {
        try
        {
            // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
                // Increase the product's number position
                var item = OrderService.IncreaseItemPositionForSelectingModifiersAndAmountsForProductPageAsync();
                // Text of Tg's main button that shows the amount to be added
                var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingModifiersAndAmountsForProduct;
                // Add to the text the total cost of the selected product positions and modifiers
                btnText = string.Format(btnText, item.TotalPrice);
                // Show the resulting text on the button
                await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
            }
            else
            {
                // Increase the product's number position
                OrderService.IncreaseItemPositionForSelectingModifiersAndAmountsForProductPageAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Decreases the current product's number position in the 'SelectingModifiersAndAmountsForProduct' page view.
    // If after decreasing, there are no product position left, then go back to the main page view
    private async Task RemoveProductInSelectingModifiersAndAmountsForProductPageAsync()
    {
        try
        {
            // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
                // If after decreasing the number of product positions there are none left, then remove this product position
                var item = OrderService.RemoveOrDecreaseItemPositionForSelectingModifiersAndAmountsForProductPageAsync();
                // If the current product position has been removed, then go back to the main page view
                if (item is null)
                {
                    // Go back to the preview page
                    StateOfPage!.GoBack();
                    // If there are any selected products left, then show the Tg's main button of the main page view
                    if (OrderService.PersonalInfoOfOrder.HaveSelectedProducts())
                    {
                        // Text of Tg's main button of the main page view
                        var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                        // Show the resulting text on the button
                        await TwaNet.SetMainButtonTextAsync(JsRuntime, btnText);
                    }
                    else
                    {
                        // Hide the Tg's main button
                        await TwaNet.HideMainButtonAsync(JsRuntime);
                    }
                    // Hide the Tg's back button
                    await TwaNet.HideBackButtonAsync(JsRuntime);
                    // Save the action data of this web app in a API server
                    await OrderService.SendChangedOrderModelToServerAsync();
                }
                else
                {
                    // Text of Tg's main button that shows the amount to be added
                    var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingModifiersAndAmountsForProduct;
                    // Add to the text the total cost of the selected product positions and modifiers
                    btnText = string.Format(btnText, item.TotalPrice);
                    // Show the resulting text on the button
                    await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
                }
            }
            else
            {
                // If after decreasing the number of product positions there are none left, then remove this product position
                if (OrderService.RemoveOrDecreaseItemPositionForSelectingModifiersAndAmountsForProductPageAsync() is null)
                {
                    StateOfPage!.GoBack();
                    await OrderService.SendChangedOrderModelToServerAsync();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Increases the product's number position by product ID in the 'SelectingProducts' page view for the 'SelectingAmountsForProducts' page
    public async Task AddProductWithoutModifiersForSelectingAmountsForProductsPageAsync(Guid productId)
    {
        try
        {
            // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
                // Go to the 'SelectingAmountsForProducts' page view
                StateOfPage!.GoToPage(PageViewType.SelectingAmountsForProducts);
                // Increase the product's number position
                var res = OrderService.AddProductWithoutModifiersForSelectingAmountsForProductsPageAsync(productId);
                // Text of Tg's main button that shows the amount to be added
                var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingAmountsForProducts;
                // Add to the text the total cost of the selected product positions
                btnText = string.Format(btnText, res.Item.TotalPrice);
                // Show the resulting text on the button
                await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
                // Show the Tg's back button
                await TwaNet.ShowBackButtonAsync(JsRuntime);
            }
            else
            {
                StateOfPage!.GoToPage(PageViewType.SelectingAmountsForProducts);
                OrderService.AddProductWithoutModifiersForSelectingAmountsForProductsPageAsync(productId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Increases the current product's number position in the 'SelectingAmountsForProducts' page view
    private async Task AddProductWithoutModifiersInSelectingAmountsForProductsPageAsync()
    {
        try
        {
            // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Call the haptic feedback in Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
                // Increase the product's number position
                var res = OrderService.AddProductWithoutModifiersInSelectingAmountsForProductsPageAsync();
                // Text of Tg's main button that shows the amount to be added
                var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingAmountsForProducts;
                // Add to the text the total cost of the selected product positions
                btnText = string.Format(btnText, res.Item.TotalPrice);
                // Show the resulting text on the button
                await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
            }
            else
            {
                OrderService.AddProductWithoutModifiersInSelectingAmountsForProductsPageAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Decreases the current product's number position in the 'SelectingAmountsForProducts' page view
    // If after decreasing the current product's number position there are none left, then go to the main page view
    private async Task RemoveProductWithoutModifiersInSelectingAmountsForProductsPageAsync()
    {
        try
        {
            // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Calls the haptic feedback in Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
                // If after decreasing the number of product positions there are none left, then remove this product position
                var res = OrderService.RemoveProductWithoutModifiersInSelectingAmountsForProductsPageAsync();

                // If the current product position has been removed, then go back to the main page view
                if (res is null)
                {
                    // Goes to the preview page
                    StateOfPage!.GoBack();
                    // If there are any selected products left, then show the Tg's main button of the main page view
                    if (OrderService.PersonalInfoOfOrder.HaveSelectedProducts())
                    {
                        // Text of Tg's main button of the main page view
                        var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                        // Shows the resulting text on the button
                        await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
                    }
                    else
                    {
                        // Hides the Tg's main button
                        await TwaNet.HideMainButtonAsync(JsRuntime);
                    }
                    // Hides the Tg's back button
                    await TwaNet.HideBackButtonAsync(JsRuntime);
                }
                else
                {
                    // Text of Tg's main button that shows the amount to be added
                    var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingAmountsForProducts;
                    // Adds to the text the total cost of the selected product positions
                    btnText = string.Format(btnText, res.Item.TotalPrice);
                    // Shows the resulting text on the button
                    await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
                }
            }
            else
            {
                if (OrderService.RemoveProductWithoutModifiersInSelectingAmountsForProductsPageAsync() is null)
                {
                    StateOfPage!.GoBack();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Checks the order, if loyalty program is used, then to calculate checkin.
    // After that shopping cart will shown (only for test)
    private async Task ViewOrderOfTestMode()
    {
        try
        {
            // Go to the next page
            StateOfPage!.GoToPage(PageViewType.ShoppingCart);
            // Calucate a loyalty program and allowed bonus sum to pay
            await OrderService!.CalculateLoayltyProgramAndAllowedSumAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Listens the Tg's main button. When the button is clicked, the operations described inside the method are performed
    private async Task TelegramHandlerOfMainButtonAsync()
    {
        Console.WriteLine(typeof(Index).FullName!, nameof(TelegramHandlerOfMainButtonAsync), "Listening the TelegramBot main button");

        // Listens the button until the web app is closed or until a critical error occurs
        while (true)
        {
            // Resets the flag of block state
            StateOfPage!.IsPageBlocked = false;
            // Hides a loading indicator on the Tg main button
            await TwaNet!.HideProgressAsync(JsRuntime);

            try
            {
                // Listens tha main button
                await TwaNet!.ListenMainButtonAsync(JsRuntime);
                // Calls the haptic feedback in Web App
                await TwaNet.SetHapticFeedbackImpactOccurredAsync(JsRuntime, HapticFeedbackImpactOccurredType.light);

                if (StateOfPage!.PageTypeOfOrder == PageViewType.SelectingProducts)
                {
                    // Displays a loading indicator on the Tg main button
                    await TwaNet!.ShowProgressAsync(JsRuntime);

                    // Calculates loyalty program if that is used
                    if (OrderService!.GeneralInfoOfOnlineStore.UseIikoBizProgram)
                    {
                        // Caluclates checkin of final order.
                        // Also if a final sum with discounts are less than available min sum to pay, then notice a customer about it
                        // and finishes remaining operations
                        // Calculates an allowed bonus sum for the order
                        if (!(await OrderService.CalculateLoyaltyProgramAndAllowedSumAndCheckAvailableMinSumForPayAsync(JsRuntime, TwaNet))) continue;
                    }
                    else
                    {
                        // If a final sum of order is less than available min sum to pay, then notice a customer about it
                        // and finishes remaining operations
                        if (!(await OrderService!.CheckAvailableMinSumForPayAsync(JsRuntime, TwaNet))) continue;
                    }

                    // Goes to the shopping cart page
                    StateOfPage.GoToPage(PageViewType.ShoppingCart);
                    // Renders the page
                    StateHasChanged();

                    // Scrolls to a top of page
                    await JsHelperService!.ScrollToTopAsync(JsRuntime);
                    // Shows the Tg's back button
                    await TwaNet.ShowBackButtonAsync(JsRuntime);
                    // Text of the shopping cart page with a final sum
                    var btnTxt = string.Format(OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().ShoppingCart, OrderService.PersonalInfoOfOrder.FinalSum);
                    // Shows the resulting text on the button
                    await TwaNet.SetMainButtonTextAsync(JsRuntime, btnTxt);
                    // Hides the Tg's back button
                    await TwaNet!.HideProgressAsync(JsRuntime);
                }
                else if (StateOfPage!.PageTypeOfOrder == PageViewType.SelectingModifiersAndAmountsForProduct)
                {
                    // If mandatory modifiers are not selected then notice a customer about it and skip the remaining operations
                    if (!OrderService!.CheckSelectedModifiersInSelectingModifiersAndAmountsForProductPageAsync())
                    {
                        // Popup message of an incorrect selected modifiers
                        var popupMsg = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppPopupMessages().IncorrectSelectedModifier ?? throw new InfoException(typeof(OnlineStoreService).FullName!,
                            nameof(TelegramHandlerOfMainButtonAsync), nameof(Exception), $"{typeof(TlgWebAppPopupMessages).FullName!}." +
                            $"{nameof(TlgWebAppPopupMessages.IncorrectSelectedModifier)}", ExceptionType.Null);

                        // Shows the popup message for a customer
                        await TwaNet.ShowOkPopupMessageAsync(JsRuntime, popupMsg.Title, popupMsg.Title, HapticFeedBackNotificationType.warning);
                        continue;
                    }

                    // Goes back to the main page view
                    StateOfPage.GoBack();
                    // Renders the page
                    StateHasChanged();

                    // Text of Tg's main button of the main page view
                    var btnText = OrderService!.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(JsRuntime, btnText);
                    await TwaNet.HideBackButtonAsync(JsRuntime);

                    // Save the action data of this web app in a API server
                    await OrderService!.SendChangedOrderModelToServerAsync();
                }
                else if (StateOfPage!.PageTypeOfOrder == PageViewType.SelectingAmountsForProducts)
                {
                    StateOfPage.GoBack();
                    StateHasChanged();

                    await TwaNet.HideBackButtonAsync(JsRuntime);
                    var btnText = OrderService!.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(JsRuntime, btnText);
                    await OrderService!.SendChangedOrderModelToServerAsync();
                }
                else if (StateOfPage!.PageTypeOfOrder == PageViewType.ChangingSelectedProductsWithModifiers)
                {
                    StateOfPage.GoBack();
                    StateHasChanged();

                    await TwaNet.HideBackButtonAsync(JsRuntime);
                    var btnText = OrderService!.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(JsRuntime, btnText);
                    await OrderService!.SendChangedOrderModelToServerAsync();
                }
                else if (StateOfPage!.PageTypeOfOrder == PageViewType.ShoppingCart)
                {
                    // Sets the page in a blocked state
                    StateOfPage!.IsPageBlocked = true;
                    await TwaNet!.ShowProgressAsync(JsRuntime);

                    // If the order's data is incorrect then notice a customer about error and stop processing
                    if (!(await OrderService!.IsNecessaryDataOfOrderCorrect(JsRuntime, TwaNet)))
                    {
                        await TwaNet!.HideProgressAsync(JsRuntime);
                        continue;
                    }

                    // If a customer's wallet balance has been changed recently then notice a customer about it and
                    // recalculate the order's final sum to pay
                    if ((await OrderService.IsWalletBalanceChangedInIikoCardAsync()))
                    {
                        await TwaNet!.HideProgressAsync(JsRuntime);
                        // Popup message of a changed wallet balance of a customer
                        var btnTxt = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppPopupMessages().WalletBalanceChangedInIikoBiz
                            ?? throw new InfoException(typeof(OnlineStoreService).FullName!, nameof(TelegramHandlerOfMainButtonAsync), nameof(Exception),
                            $"{typeof(TlgWebAppPopupMessages).FullName!}.{nameof(TlgWebAppPopupMessages.WalletBalanceChangedInIikoBiz)}", ExceptionType.Null);

                        await TwaNet.ShowOkPopupMessageAsync(JsRuntime, btnTxt.Title, btnTxt.Description, HapticFeedBackNotificationType.warning);
                        continue;
                    }

                    // Tries to create an invoice link in API server
                    await OrderService!.TryToCreateInvoiceLinkAsync(JsRuntime, TwaNet);
                    await TwaNet!.HideProgressAsync(JsRuntime);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);

                // !!! Ask the user about to close web app or left it !!!
                await TryToCloseWebAppAsync();
            }
        }
    }

    // Listens the Tg's back button. When the button is clicked, the operations described inside the method are performed
    private async Task TelegramHandlerOfBackButtonAsync()
    {
        Console.WriteLine(typeof(Index).FullName!, nameof(TelegramHandlerOfBackButtonAsync), "Listening the TelegramBot back button");

        // Listens the button until the web app is closed or until a critical error occurs
        while (true)
        {
            try
            {
                // Listens tha back button
                await TwaNet!.ListenBackButtonAsync(JsRuntime);
                // Calls the haptic feedback in Web App
                await TwaNet.SetHapticFeedbackImpactOccurredAsync(JsRuntime, HapticFeedbackImpactOccurredType.light);

                // If there is a long processing on the page then do nothing
                if (StateOfPage!.IsPageBlocked) continue;

                // Goes back to the previous page (main page view)
                else if (StateOfPage.PageTypeOfOrder == PageViewType.SelectingModifiersAndAmountsForProduct)
                {
                    // Removes the current product position from the basket
                    OrderService!.CancelCurrSelectedItemWithModifiers();

                    // Goes back to the previous page
                    StateOfPage.GoBack();
                    StateHasChanged();

                    // Shows the Tg's main button of the main page view
                    if (OrderService.PersonalInfoOfOrder.HaveSelectedProducts())
                    {
                        var btnText = OrderService!.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                        await TwaNet.SetMainButtonTextAsync(JsRuntime, btnText);
                    }
                    else
                    {
                        await TwaNet.HideMainButtonAsync(JsRuntime);
                    }
                    // Hides the Tg's back button
                    await TwaNet.HideBackButtonAsync(JsRuntime);
                }
                // Goes back to the previous page (main page view)
                else if (StateOfPage.PageTypeOfOrder == PageViewType.SelectingAmountsForProducts)
                {
                    StateOfPage.GoBack();
                    StateHasChanged();

                    var btnText = OrderService!.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(JsRuntime, btnText);
                    await TwaNet.HideBackButtonAsync(JsRuntime);
                }
                // Goes back to the previous page (main page view)
                else if (StateOfPage.PageTypeOfOrder == PageViewType.ChangingSelectedProductsWithModifiers)
                {
                    StateOfPage.GoBack();
                    StateHasChanged();

                    var btnText = OrderService!.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(JsRuntime, btnText);
                    await TwaNet.HideBackButtonAsync(JsRuntime);
                }
                // Goes back to the previous page (main page view)
                else if (StateOfPage.PageTypeOfOrder == PageViewType.ShoppingCart)
                {
                    StateOfPage.GoBack();
                    StateHasChanged();

                    var btnText = OrderService!.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(JsRuntime, btnText);
                    await TwaNet.HideBackButtonAsync(JsRuntime);
                    // Save the action data of this web app in a API server
                    await OrderService!.SendChangedOrderModelToServerAsync();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);

                // !!! Ask the user abount to close web app or left it !!!
                await TryToCloseWebAppAsync();
            }
        }
    }

    // Tries to close the web application in the Telegram
    private async Task TryToCloseWebAppAsync()
    {
        try
        {
            // Closes the web app in the Telegram
            await TwaNet!.CloseWebAppAsync(JsRuntime);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            StateOfPage!.SetErrorStateForWebApp();
        }
    }

    // Sends the resulting order to API server and gets back an invoice link to pay (only for test)
    private async Task PayOrderForTestAsync()
    {
        try
        {
            // Tries to create an invoice link in API server
            await OrderService!.TryToCreateInvoiceUrlLinkAsync();
            // Shows info about the created order
            StateOfPage!.GoToPage(PageViewType.InfoAboutCreatedOrder);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Listens the Tg's main and back buttons
    async Task ListenTwaBtnsAsync()
    {
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(ListenTwaBtnsAsync), "Listening the main button of the TelegramBot");

            var mainButtonTask = TelegramHandlerOfMainButtonAsync();
            var backButtonTask = TelegramHandlerOfBackButtonAsync();
            await mainButtonTask;
            await backButtonTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            StateOfPage!.SetErrorStateForWebApp();
        }
    }

    // Gets the terminal ID when a customer selects the terminal on the page
    private async Task OnSelectTerminalAsync(ChangeEventArgs e)
    {
        try
        {
            // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Calls the haptic feedback in Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
            }

            // Converts the argument to string type
            var arg = Convert.ToString(e.Value);
            // If the argument is parsed to Guid successfully then set the new terminal ID for order
            if (Guid.TryParse(arg, out Guid id))
            {
                if (OrderService!.IsReleaseMode)
                {
                    if (OrderService.IsLoyaltyProgramAvailableForProcess)
                    {
                        // Displays a loading indicator on the Tg main button
                        await TwaNet!.ShowProgressAsync(JsRuntime);
                        // Sets the terminal ID to the order with calculating the loyalty program
                        await OrderService!.SetPickupTerminalWithLoyaltyProgramProcessAsync(JsRuntime, TwaNet!, id);

                        // Text of the shopping cart page with a final sum
                        var btnText = string.Format(OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().ShoppingCart, OrderService!.FinalSumOfOrder());
                        // Shows the resulting text on the button
                        await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
                        // Hides a loading indicator on the Tg main button
                        await TwaNet!.HideProgressAsync(JsRuntime);
                    }
                    // Just sets the new terminal ID for the order
                    else OrderService.SetPickupTerminal(id);
                }
                else if (OrderService.IsLoyaltyProgramAvailableForProcess)
                {
                    await OrderService!.SetPickupTerminalWithLoyaltyProgramProcessAsync(id);
                }
                else
                {
                    OrderService.SetPickupTerminal(id);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.HideProgressAsync(JsRuntime);
            }
        }
    }

    // Calculates/Recalculates the loaylty program after the coupon has been applied
    private async Task CalculateLoyaltyProgramByCouponAsync()
    {
        try
        {
            // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Calls the haptic feedback in Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);
                // Displays a loading indicator on the Tg main button
                await TwaNet!.ShowProgressAsync(JsRuntime);
                // Calculates the loaylty program and calculate the allowed bonus amount to pay
                await OrderService.CalculateLoayltyProgramAndAllowedSumAsync(JsRuntime, TwaNet);

                // Text of the shopping cart page with a final sum
                var btnText = string.Format(OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().ShoppingCart, OrderService!.FinalSumOfOrder());
                // Shows the resulting text on the button
                await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
                // Hides a loading indicator on the Tg main button
                await TwaNet!.HideProgressAsync(JsRuntime);
            }
            else await OrderService.CalculateLoayltyProgramAndAllowedSumAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.HideProgressAsync(JsRuntime);
            }
        }
    }

    // Changes the delivery method for order
    private async Task ChangeDeliveryTypeFlagAsync(bool byCourier)
    {
        try
        {
            OrderService!.PersonalInfoOfOrder.ByCourier = byCourier;

            // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // Calls the haptic feedback in Web App
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync(JsRuntime);

                if (OrderService.IsLoyaltyProgramAvailableForProcess)
                {
                    // Displays a loading indicator on the Tg main button
                    await TwaNet!.ShowProgressAsync(JsRuntime);
                    // Calculates the loaylty program and calculate the allowed bonus amount to pay
                    await OrderService.CalculateLoayltyProgramAndAllowedSumAsync(JsRuntime, TwaNet);

                    // Text of the shopping cart page with a final sum
                    var btnText = string.Format(OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().ShoppingCart, OrderService!.FinalSumOfOrder());
                    // Shows the resulting text on the button
                    await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
                    // Hides a loading indicator on the Tg main button
                    await TwaNet!.HideProgressAsync(JsRuntime);
                }
            }
            else await OrderService.CalculateLoayltyProgramAndAllowedSumAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.HideProgressAsync(JsRuntime);
            }
        }
    }

    // Empties the basket
    private async Task RemoveAllSelectedProductsInShoppingCartAsync()
    {
        try
        {
            // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // This popup message is using to empty the basket
                var popupMsg = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppPopupMessages().EmptyShoppingCart ?? throw new InfoException(typeof(Index).FullName!,
                    nameof(RemoveAllSelectedProductsInShoppingCartAsync), nameof(Exception), $"{typeof(TlgWebAppPopupMessages).FullName!}." +
                    $"{nameof(TlgWebAppPopupMessages.EmptyShoppingCart)}", ExceptionType.Null);

                const string yes = "0";
                const string no = "1";

                // https://core.telegram.org/bots/webapps#popupparams
                var popupPrms = new PopupParams(popupMsg.Title, popupMsg.Description, new List<PopupButton>
                {
                    new PopupButton(yes, "Да", PopupButtonType.destructive),
                    new PopupButton(no, "Отмена", PopupButtonType.destructive)
                });

                // Gives a customer to make a choice
                var res = await TwaNet!.ShowPopupParamsAsync(JsRuntime, popupPrms, HapticFeedBackNotificationType.warning, HapticFeedbackImpactOccurredType.soft);
                // A customer chose to empty the basket
                if (res == yes)
                {
                    // Goes back to the main page view
                    StateOfPage!.GoBack();
                    // Empties the basket
                    await OrderService.RemoveAllSelectedProductsInShoppingCartPageAsync();
                    // Hide the Tg's main and back buttons
                    await TwaNet.HideMainButtonAsync(JsRuntime);
                    await TwaNet.HideBackButtonAsync(JsRuntime);
                }
            }
            else
            {
                StateOfPage!.GoBack();
                await OrderService.RemoveAllSelectedProductsInShoppingCartPageAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Removes the current product positions from the order
    private async Task CancelCurrSimilarSelectedItemsWithModifiersAsync()
    {
        try
        {
            // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService!.IsReleaseMode)
            {
                // This popup message is using to remove the current product positions from the order
                var popupMsg = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppPopupMessages().EmptySelectedItemsWithModifiers ?? throw new InfoException(typeof(Index).FullName!,
                    nameof(CancelCurrSimilarSelectedItemsWithModifiersAsync), nameof(Exception), $"{typeof(TlgWebAppPopupMessages).FullName!}." +
                    $"{nameof(TlgWebAppPopupMessages.EmptySelectedItemsWithModifiers)}", ExceptionType.Null);

                const string yes = "0";
                const string no = "1";

                // https://core.telegram.org/bots/webapps#popupparams
                var popupPrms = new PopupParams(popupMsg.Title, popupMsg.Description, new List<PopupButton>
                {
                    new PopupButton(yes, "Да", PopupButtonType.destructive),
                    new PopupButton(no, "Отмена", PopupButtonType.destructive)
                });

                // Gives a customer to make a choice
                var res = await TwaNet!.ShowPopupParamsAsync(JsRuntime, popupPrms, HapticFeedBackNotificationType.warning, HapticFeedbackImpactOccurredType.soft);
                // A customer chose to remove the current product positions from the order
                if (res == yes)
                {
                    // Goes back to the main page view
                    StateOfPage!.GoBack();
                    // Removes the current product positions from the order
                    await OrderService.CancelCurrSimilarSelectedItemsWithModifiersAsync();

                    // If there are any selected products left, then show the Tg's main button of the main page view
                    if (OrderService.PersonalInfoOfOrder.HaveSelectedProducts())
                    {
                        var btnText = OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingProducts;
                        await TwaNet.SetMainButtonTextAsync(JsRuntime, btnText);
                    }
                    else
                    {
                        await TwaNet.HideMainButtonAsync(JsRuntime);
                    }
                    await TwaNet.HideBackButtonAsync(JsRuntime);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Changes the product's size of the current position
    private async Task OnChangingProductSizeAsync(ChangeEventArgs arg)
    {
        // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
        if (OrderService!.IsReleaseMode)
        {
            // Calls the haptic feedback in Web App
            await TwaNet!.SetHapticFeedbackImpactOccurredAsync(JsRuntime, HapticFeedbackImpactOccurredType.soft);
        }

        // Converts the argument to string type
        var value = arg.Value?.ToString();
        // If the argument is parsed to Guid successfully then set the new size ID to the current position
        if (Guid.TryParse(value, out Guid sizeId))
        {
            try
            {
                // Sets the new size ID to the current position
                var item = OrderService.ChangeProductSize(sizeId);

                if (OrderService!.IsReleaseMode)
                {
                    // Text of Tg's main button that shows the amount to be added
                    var btnText = string.Format(OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().SelectingModifiersAndAmountsForProduct, item.TotalPrice);
                    await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnText);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    // Set an amount of bonus to the order
    private async void OnChangeAllowedWalletSum(ChangeEventArgs arg)
    {
        // Converts the argument to string type
        var value = arg.Value?.ToString();
        // If the argument is parsed to Int successfully then set the new amount
        if (Int32.TryParse(value, out var walletSum))
        {
            OrderService!.PersonalInfoOfOrder.SelectedWalletSum = walletSum;

            // Available to use the Tg WebApp interface in this mode (WebApp have to be loaded via the Telegram)
            if (OrderService.IsReleaseMode)
            {
                var btnTxt = string.Format(OrderService.GeneralInfoOfOnlineStore.GetTlgWebAppBtnTxts().ShoppingCart, OrderService.PersonalInfoOfOrder.FinalSum - walletSum);
                await TwaNet!.SetMainButtonTextAsync(JsRuntime, btnTxt);
            }
        }
    }
}
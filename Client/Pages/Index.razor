@page "/"
@using System.Net.Http
@using ApiServerForTelegram.Entities.EExceptions
@using ApiServerForTelegram.Entities.IikoCloudApi.General.Menu.RetrieveExternalMenuByID
@using Newtonsoft.Json
@using System.Net
@using System.Text
@using TlgWebAppNet
@using WebAppAssembly.Client.Repositories.JsHelper
@using WebAppAssembly.Shared.Entities.EMenu
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using WebAppAssembly.Shared.Entities.CreateDelivery
@using WebAppAssembly.Shared.Entities.Exceptions
@using WebAppAssembly.Shared.Entities.IikoCloudApi
@using WebAppAssembly.Shared.Entities.Telegram
@using WebAppAssembly.Shared.Entities.WebApp
@using WebAppAssembly.Shared.Models
@using WebAppAssembly.Shared.Models.Order
@using WebAppAssembly.Shared.Entities
@using Product = WebAppAssembly.Shared.Entities.EMenu.Product
@using WebAppAssembly.Client.Service
@inject IJSRuntime JsRuntime
@inject HttpClient Http

<PageTitle>Index</PageTitle>

@*Page for orders*@
@if (IsLoadedGeneralInfo)
{
    if (OrderService is null || (OrderService.IsReleaseMode && TwaNet is null) || StateOfPage is null || StateOfPage.HaveErrors || JsHelperService is null)
    {
        <div>
            <center>
                <h6>Happened something wrong:(</h6>
            </center>
        </div>
    }
    else
    {
        var dgi = OrderService.DeliveryGeneralInfo;

        // Show the page for selecting products
        if (StateOfPage.PageTypeOfOrder == PageTypeOfOrder.SelectingProducts)
        {
            var itemCategories = dgi.ItemCategories;
            TransportMenuCategoryDto? itemCategory = null;

            if (itemCategories is not null)
            {
                <h1 style="padding-top: 5px;margin-bottom: 0px;text-align: center;">
                    Категории
                </h1>
                <hr style="color:grey;margin-bottom:0px;margin-top:10px;"/>
                <div class="horizontal_slider" style="padding-left: 0px;padding-right: 0px;padding-top:5px;margin-top: 0px;padding-bottom:10px;">
                    <div class="slider_container">
                        @foreach (var category in itemCategories)
                        {
                            if (OrderService.CurrentGroupId is not null && category.Id == (Guid)OrderService.CurrentGroupId)
                            {
                                itemCategory = category;
                            }

                            <div class="item">
                                <div class="row">
                                    <img class="img-fluid rounded" src="@category.ButtonImageUrl" alt="@category.Name" @onclick="(e => AddCurrentGroupId(category.Id))"/>
                                </div>
                                <div class="row">
                                    <h6 style="text-align:center;">@category.Name</h6>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            var products = itemCategory is null ? dgi.TransportItemDtos : itemCategory.Items;

            if (itemCategory is not null)
            {
                <h1 style="padding-top: 0px;margin-bottom: 0px;text-align:center;">
                    @itemCategory.Name
                </h1>
            }
            else
            {
                <h1 style="padding-top: 0px;margin-bottom: 0px;text-align:center;">
                    Меню
                </h1>
            }
            <hr style="color:grey;"/>

            if (products != null && products.Any())
            {
                int columnAmount = 3;
                int productCount = products.Count();

                for (int i = 0; i < productCount; i += columnAmount)
                {
                    <div>
                        <div class="row mt-1 mb-1">
                        @for (int j = i; j < i + columnAmount; j++)
                        {
                            if (j < productCount)
                            {
                                var product = products[j];

                                <div class="col">
                                    <center>
                                        <img class="img-fluid rounded" src="@product.ImageLink()" alt="@product.Name"
                                            @onclick="(e => (product.HaveModifiers() || product.HaveSizesMoreThanOne())
                                            ? AddProductInMainMenuAsync(product.ItemId ?? Guid.Empty) : AddProductForOtherMenuAsync(product.ItemId ?? Guid.Empty))"/>
                                    </center>
                                    <h6 style="line-height:0.5;margin-top: 5px;">@($"₽{(product.Price().ToString() ?? "?")}")</h6>
                                    <p style="line-height:1;" id="@product.ItemId">@product.Name</p>
                                        <p style="line-height:0.5;color:lightgrey;margin-top:0px;" id="@product.ItemId">@(product.WeightAsString()) г</p>
                                </div>
                            }
                            else
                            {
                                <div class="col"></div>
                            }
                        }
                        </div>

                        <div class="row mb-3">
                            @for (int j = i; j < i + columnAmount; j++)
                            {
                                if (j < productCount)
                                {
                                    var product = products[j];
                                    <div class="col">
                                        @if (!product.HaveItems())
                                        {
                                            <div class="TlBlr_div TlBlrCounter_x TlBlrDesktopProductCard_footer TlBlrCounter_y">
                                                <button @onclick="(e => AddProductInMainMenuAsync(product.ItemId ?? Guid.Empty))" class="TlBlrCounter_btn TlBlrCounter_onlyIncrement"
                    data-testid="amount-select-increment">
                                                    <span>Добавить</span>
                                                </button>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="TlBlr_div TlBlrCounter_x TlBlrDesctopProductCard TlBlrCounter_y">
                                                <button @onclick="(e => (product.HaveModifiers() || product.HaveSizesMoreThanOne())
                                                    ? ChangeProductsWithModifiersForChangingMenuAsync(product.ItemId ?? Guid.Empty)
                                                    : RemoveProductInMainMenuAsync(product.ItemId ?? Guid.Empty))" class="TlBlrCounter_btn TlBlrCounter_decrement"
                    data-testid="amount-select-decrement">
                                                    <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M6 12a1 1 0 0 0 1 1h10a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" fill="currentColor"></path>
                                                    </svg>
                                                </button>
                                                <span>@product.TotalAmount</span>
                                                <button @onclick="(e => AddProductInMainMenuAsync(product.ItemId ?? Guid.Empty))" class="TlBlrCounter_btn TlBlrCounter_increment"
                    data-testid="amount-select-increment">
                                                    <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                        fill="currentColor"></path>
                                                    </svg>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="col"></div>
                                }
                            }
                        </div>                
                    </div>
                }
            }

            if (IsTestMode)
            {
                if (OrderModel.HaveSelectedProducts())
                {
                    <div>
                        <center>
        @*Show button if at least one product is selected*@
                            <a href="#" @onclick="(e => ViewOrderOfTestMode())" data-toggle="modal" data-target="#productModal" class="btn btn-success">Корзина</a>
                        </center>
                    </div>
                }
            }
        }
        // Show the page for to select modifiers for the selected product
        else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderProductWithModifiersSelect)
        {
            var item = ItemById(SelectedProductId, ProductPositionId);
            var product = ProductById(SelectedProductId);

            <div class="container">
            @if (IsTestMode)
            {
                <div align="right">
                    <button @onclick="(e => CancelSelectModifiersAsync(SelectedProductId, ProductPositionId))" 
        data-toggle="modal" data-target="#productModal" class="btn btn-link btn-sm btn-text-green">Отмена</button>
                </div>
            }
            <div align="center">
                <img class="img-thumbnail" style="margin-top:5px;margin-bottom:5px;" src="@product.ImageLink()"
        alt="@product.Name" />
            </div>

            <h5>@product.Name</h5> <h6 style="color:lightgrey;">@(product.WeightAsString()) г</h6>
            <div class="row">
                <div class="col">
                    <h5>В 100 граммах</h5>
                        <p>@(product.EnergyAsString()) Ккал · @(product.CarbsAsString()) Углеводы</p>
                </div>
                <div class="col">
                    <div class="TlBlr_div TlBlrCounter_x TlBlrDesctopProductCard TlBlrCounter_y" style="height:48px;">
                        <button @onclick="(e => RemoveProductInModifierMenuAsync(product.ItemId ?? Guid.Empty, ProductPositionId))" class="TlBlrCounter_btn TlBlrCounter_decrement"
        data-testid="amount-select-decrement">
                            <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M6 12a1 1 0 0 0 1 1h10a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" fill="currentColor"></path>
                            </svg>
                        </button>
                        <span>@item.Amount</span>
                        <button @onclick="(e => AddProductInModifierMenuAsync(product.ItemId ?? Guid.Empty, ProductPositionId))" class="TlBlrCounter_btn TlBlrCounter_increment"
        data-testid="amount-select-increment">
                            <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                fill="currentColor"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(product.Description))
            {
                <h4>Описание</h4>
                <p>@product.Description</p>
            }

            @if (product.HaveSizesMoreThanOne())
            {
                <div style="padding-bottom: 3px;">
                    <h5>Размеры</h5>
                    @{
                        bool isFirst = true;
                    }
                    @foreach (var size in product.ItemSizes!)
                    {
                        <div class="form-check form-check-inline">
                            @if (isFirst)
                            {
                                <input class="form-check-input" type="radio" name="inlineRadioOptions" style="box-shadow:none;"
                                id="@size.SizeId" value="@size.SizeId" @onchange="OnChangingProductSizeAsync" checked>
                                isFirst = false;
                            }
                            else
                            {
                                <input class="form-check-input" type="radio" name="inlineRadioOptions" style="box-shadow:none;"
                                id="@size.SizeId" value="@size.SizeId" @onchange="OnChangingProductSizeAsync">
                            }
                            <label class="form-check-label" for="inlineRadio1">@size.SizeName</label>
                        </div>
                    }
                </div>
            }

            @{
                var modifierGroups = product.ModifierGroups();
            }
            @if (modifierGroups is not null)
            {
                foreach (var groupModifier in modifierGroups)
                {
                    <div class="row">
                        @{
                            var groupInfo = item.SimpleGroupModifiers?.FirstOrDefault(x => x.Id == groupModifier.ItemGroupId);
                        }
                        <h5>@(groupInfo is not null ? groupInfo.Name : "#UnknownGroupName")</h5>
                    </div>
                    @if (groupModifier.Items is not null)
                    {
                        foreach (var modifier in groupModifier.Items)
                        {
                            <div class="row mb-1">
                                <div class="col-5">

                                    @if (!item.IsSelectedModifier(modifier.ItemId ?? Guid.Empty, groupModifier.ItemGroupId))
                                    {
                                        <div class="TlBlr_div TlBlrCounter_x TlBlrDesktopProductCard_footer TlBlrCounter_y">
                                            @if (!item.IsReachedMaxAmountOfGroupModifier(groupModifier.ItemGroupId ?? Guid.Empty, modifier.ItemId ?? Guid.Empty))
                                            {
                                                <button @onclick="(e => AddModifierAsync(SelectedProductId, modifier.ItemId ?? Guid.Empty, ProductPositionId, groupModifier.ItemGroupId))"
                                                    class="TlBlrCounter_btn TlBlrCounter_onlyIncrement" data-testid="amount-select-increment">
                                                    <span>Добавить</span>
                                                </button>
                                            }
                                            else
                                            {
                                                <button data-testid="amount-select-increment" class="TlBlrCounter_btn TlBlrCounter_onlyIncrement" disabled>
                                                    <span>Добавить</span>
                                                </button>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="TlBlr_div TlBlrCounter_x TlBlrDesctopProductCard TlBlrCounter_y">
                                            <button @onclick="(e => RemoveModifierAsync(SelectedProductId, modifier.ItemId ?? Guid.Empty, ProductPositionId, groupModifier.ItemGroupId))"
                                                class="TlBlrCounter_btn TlBlrCounter_decrement" data-testid="amount-select-decrement">
                                                <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M6 12a1 1 0 0 0 1 1h10a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" fill="currentColor"></path>
                                                </svg>
                                            </button>
                                            
                                            @if (!item.IsReachedMaxAmountOfGroupModifier(groupModifier.ItemGroupId ?? Guid.Empty, modifier.ItemId ?? Guid.Empty))
                                            {
                                                <span>@(item.AmountOfModifier(modifier.ItemId ?? Guid.Empty, groupModifier.ItemGroupId))</span>
                                                <button @onclick="(e => AddModifierAsync(SelectedProductId, modifier.ItemId ?? Guid.Empty, ProductPositionId, groupModifier.ItemGroupId))"
                                                class="TlBlrCounter_btn TlBlrCounter_increment" data-testid="amount-select-increment">
                                                    <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                                fill="currentColor"></path>
                                                    </svg>
                                                </button>
                                            }
                                            else
                                            {
                                                <span style="color:red;">@(item.AmountOfModifier(modifier.ItemId ?? Guid.Empty, groupModifier.ItemGroupId))</span>
                                                    <button data-testid="amount-select-increment" class="TlBlrCounter_btn TlBlrCounter_increment" disabled>
                                                    <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                                fill="currentColor"></path>
                                                    </svg>
                                                </button>  
                                            }
                                        </div>
                                    }


                                </div>

                                <div class="col">
                                    @{
                                        var modifierD = item.Modifiers?.FirstOrDefault(x => x.ProductId == modifier.ItemId);
                                    }
                                    <p>@modifierD?.Name</p>
                                    </div>
                                    <div align="right" class="col">
                                    @{
                                        var price = modifier.Price();
                                    }
                                    <p>@(price == 0 ? "Бесплатно" : $"₽{price}")</p>
                                </div>
                            </div>
                        }
                    }
                }
            }

            @if (IsTestMode)
            {
                <br />
                <div>
                    @if (item.IsReachedMinAmountOfGroupModifiers() && item.IsReachedMinAmountOfModifiers())
                    {
                        <button @onclick="(e => CompleteSelectModifiers())" id="@SelectedProductId" data-toggle="modal" data-target="#productModal"
                            class="btn btn-success w-100">Добавить ₽@(TotalSumOfSelectedProductWithModifiers(SelectedProductId, ProductPositionId))</button>
                    }
                    else
                    {
                        <button @onclick="(e => CompleteSelectModifiers())" id="@SelectedProductId" data-toggle="modal" data-target="#productModal"
                            class="btn btn-success w-100" disabled>Добавить ₽@(TotalSumOfSelectedProductWithModifiers(SelectedProductId, ProductPositionId))</button>
                    }
                </div>
            }
        </div>
        }
        // Show the page to add products
        else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderProductSelect)
        {
            var item = ItemById(SelectedProductId);
            var product = ProductById(SelectedProductId);

            <div class="container">
                @if (IsTestMode)
                {
                    <div align="right">
                        <button @onclick="(e => CancelSelectedProduct(SelectedProductId))" 
            data-toggle="modal" data-target="#productModal" class="btn btn-link btn-sm btn-text-green">Отмена</button>
                    </div>
                }
                <div align="center">
                    <img class="img-thumbnail" style="margin-top:5px;margin-bottom:5px;" src="@product.ImageLink()"
            alt="@product.Name" />
                </div>

                <h5>@product.Name</h5> <h6 style="color:lightgrey;">@(product.WeightAsString()) г</h6>
                <div class="row">
                    <div class="col">
                        <h5>В 100 граммах</h5>
                        <p>@(product.EnergyAsString()) Ккал · @(product.CarbsAsString()) Углеводы</p>
                    </div>
                    <div class="col">
                        <div class="TlBlr_div TlBlrCounter_x TlBlrDesctopProductCard TlBlrCounter_y" style="height:48px;">
                            <button @onclick="(e => RemoveProductInOtherMenuAsync(product.ItemId ?? Guid.Empty))" class="TlBlrCounter_btn TlBlrCounter_decrement"
            data-testid="amount-select-decrement">
                                <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M6 12a1 1 0 0 0 1 1h10a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" fill="currentColor"></path>
                                </svg>
                            </button>
                            <span>@item.Amount</span>
                            <button @onclick="(e => AddProductInOtherMenuAsync(product.ItemId ?? Guid.Empty))" class="TlBlrCounter_btn TlBlrCounter_increment"
            data-testid="amount-select-increment">
                                <svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="TlBlrIcon_y TlBlrIcon_root TlBlrCounter_icon">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M12 6a1 1 0 0 0-1 1v4H7a1 1 0 1 0 0 2h4v4a1 1 0 1 0 2 0v-4h4a1 1 0 1 0 0-2h-4V7a1 1 0 0 0-1-1Z"
                    fill="currentColor"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>     

                @if (!string.IsNullOrEmpty(product.Description))
                {
                    <h4>Описание</h4>
                    <p>@product.Description</p>
                }

                @if (IsTestMode)
                {
                    <br />
                    <div>
                        <button @onclick="(e => CompleteSelectedProducts())" id="@SelectedProductId" data-toggle="modal" data-target="#productModal"
            class="btn btn-success w-100">Добавить</button>
                    </div>
                }
            </div>
        }
        // Show the page to remove selected products with modifiers
        else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderProductWithModifiersRemove)
        {
            bool hr = false;
            var items = OrderModel.Items?.Where(item => item.ProductId == SelectedProductId);
            var product = WebAppInfo.ProductById(CurrentGroupId, SelectedProductId);
            double totalSumOfSelectedProducts = 0;
            <br />

            @if (items is not null && product is not null)
            {
                foreach (var item in items)
                {
                    if (hr)
                    {
                        <hr style="color:lightgrey;" />
                    }
                    else
                    {
                        hr = true;
                    }

                    <div class="row">
                        <div class="col">
                            <img class="img-fluid rounded" src="@ImageLinkByProductId(item.ProductId)" alt="@item.ProductName" />
                        </div>
                        <div class="col-6">
                            @{
                                var sizeName = item.ProductSizeId is not null ? product!.ItemSizes?.FirstOrDefault(x => x.SizeId == item.ProductSizeId)?.SizeName
                                    : product!.HaveSizesMoreThanOne() ? product.ItemSizes?.FirstOrDefault()?.SizeName : null;
                            }
                            <p>@item.ProductName @sizeName</p>
                            @foreach (var modifier in item.SelectedModifiers())
                            {
                                <p> • @modifier.Name x@(modifier.Amount)</p>
                            }
                            <div style="display: flex;">
                                <button @onclick="(e => RemoveProductWithModifiersInChangingMenuAsync(item.ProductId, item.PositionId ?? Guid.Empty))"
                                    data-toggle="modal" data-target="#productModal" class="btn btn-light" style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                    -
                                </button>
                                <p style="padding-left:10px;padding-right:10px;margin-bottom:0;margin-top:3%;">@(item.Amount) шт</p>
                                <button @onclick="(e => AddProductWithModifiersInChangingMenuAsync(item.ProductId, item.PositionId ?? Guid.Empty))"
                                    data-toggle="modal" data-target="#productModal" class="btn btn-light" style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                    +
                                </button>
                            </div>
                        </div>
                        <div align="right" class="col-2">
                            @{    
                                var totalSum = product is not null ? TotalSumOfSelectedProductWithModifiers(product, item)
                                : TotalSumOfSelectedProductWithModifiers(item.ProductId, item.PositionId ?? Guid.Empty);
                                totalSumOfSelectedProducts += totalSum;
                                    
                            }
                            <p>₽@totalSum</p>
                        </div>
                    </div>
                }
            }
        <h5 align="right" style="margin-top:20px;margin-bottom:5px;">Итого: ₽@totalSumOfSelectedProducts</h5>

        <br />
        <center>
            <button @onclick="(e => RemoveSelectedProductsWithMofifiersByIdAsync(SelectedProductId))" style="background-color:rgba(28,28,28,0);outline:none;border:0;width:42px;height:32px;">
                <svg xmlns="http://www.w3.org/2000/svg" class="Trash" viewBox="0 0 16 18.286" width="16" height="18.286">
                    <path d="M1.143 16.571a1.714 1.714 0 0 0 1.714 1.714h10.286a1.714 1.714 0 0 0 1.714 -1.714V4.571H1.143zm9.714 -9.143a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zM15.429 1.143H11.143l-0.336 -0.668A0.857 0.857 0 0 0 10.039 0H5.957a0.847 0.847 0 0 0 -0.764 0.475L4.857 1.143H0.571A0.571 0.571 0 0 0 0 1.714v1.143a0.571 0.571 0 0 0 0.571 0.571h14.857a0.571 0.571 0 0 0 0.571 -0.571V1.714a0.571 0.571 0 0 0 -0.571 -0.571z"></path>
                </svg>
            </button>
        </center>
        }
        // Show the page for view and check selected products in the order
        else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderView)
        {   
            <div class="container-fluid">
                @if (IsTestMode)
                {
                    <div class="row mt-1 mb-2">
                        <div class="col">
                            <h1>Ваш заказ</h1>
                        </div>
                        <div align="right" class="col" style="padding-right:0px;padding-left:0px;">
            @*Show the button for to edit the created order if the page isn't going to open in the Telegram app*@
                            <button style="background-color:rgba(28,28,28,0);outline:none;border:0;width:42px;height:32px;">
                                <svg xmlns="http://www.w3.org/2000/svg" class="Trash" viewBox="0 0 16 18.286" width="16" height="18.286">
                                    <path d="M1.143 16.571a1.714 1.714 0 0 0 1.714 1.714h10.286a1.714 1.714 0 0 0 1.714 -1.714V4.571H1.143zm9.714 -9.143a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zM15.429 1.143H11.143l-0.336 -0.668A0.857 0.857 0 0 0 10.039 0H5.957a0.847 0.847 0 0 0 -0.764 0.475L4.857 1.143H0.571A0.571 0.571 0 0 0 0 1.714v1.143a0.571 0.571 0 0 0 0.571 0.571h14.857a0.571 0.571 0 0 0 0.571 -0.571V1.714a0.571 0.571 0 0 0 -0.571 -0.571z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row mt-1 mb-2">
                        <div class="col">
                            <h1>Ваш заказ</h1>
                        </div>
                        <div align="right" class="col" style="padding-right:0px;padding-left:0px;">
            @*Show the button for to edit the created order if the page isn't going to open in the Telegram app*@
                            <button @onclick="(e => RemoveAllSelectedProductsInShoppingCartAsync())" style="background-color:rgba(28,28,28,0);outline:none;border:0;width:42px;height:32px;">
                                <svg xmlns="http://www.w3.org/2000/svg" class="Trash" viewBox="0 0 16 18.286" width="16" height="18.286">
                                    <path d="M1.143 16.571a1.714 1.714 0 0 0 1.714 1.714h10.286a1.714 1.714 0 0 0 1.714 -1.714V4.571H1.143zm9.714 -9.143a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zm-3.429 0a0.571 0.571 0 0 1 1.143 0v8a0.571 0.571 0 0 1 -1.143 0zM15.429 1.143H11.143l-0.336 -0.668A0.857 0.857 0 0 0 10.039 0H5.957a0.847 0.847 0 0 0 -0.764 0.475L4.857 1.143H0.571A0.571 0.571 0 0 0 0 1.714v1.143a0.571 0.571 0 0 0 0.571 0.571h14.857a0.571 0.571 0 0 0 0.571 -0.571V1.714a0.571 0.571 0 0 0 -0.571 -0.571z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                }

                @{
                    bool hr = false;
                }

                @*Get the selected products in the order
                    Output all selected products*@
                @if (OrderModel.Items is not null)
                {
                    foreach (var item in OrderModel.Items)
                    {
                        var product = WebAppInfo.ProductById(item.ProductId);
                        if (product is null)
                        {
                            continue;
                        }

                        if (hr)
                        {
                            <hr style="color:lightgrey;" />
                        }
                        else
                        {
                            hr = true;
                        }
                        var sizeName = item.ProductSizeId is not null ? product.ItemSizes?.FirstOrDefault(x => x.SizeId == item.ProductSizeId)?.SizeName
                        : product.HaveSizesMoreThanOne() ? product.ItemSizes?.FirstOrDefault()?.SizeName : null;
                        if (item.HaveModifiers())
                        {
                            <div class="row">
                                <div class="col">
                                    <img class="img-fluid rounded" src="@ImageLinkByProductId(item.ProductId)" alt="@item.ProductName" />
                                </div>
                                <div class="col-6">
                                    <p>@item.ProductName @sizeName</p>
                                    @foreach (var modifier in item.SelectedModifiers())
                                    {
                                        <p> • @modifier.Name x@(modifier.Amount)</p>
                                    }
                                    <div style="display: flex;">
                                        <button @onclick="(e => RemoveProductItemInShoppingCartPageAsync(item.ProductId, item.PositionId))" data-toggle="modal" data-target="#productModal" class="btn btn-light"
    style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                            -
                                        </button>
                                        <p style="padding-left:10px;padding-right:10px;margin-bottom:0;margin-top:3%;">@(item.Amount) шт</p>
                                        <button @onclick="(e => AddProductItemInShoppingCartPageAsync(item.ProductId, item.PositionId))" data-toggle="modal" data-target="#productModal" class="btn btn-light"
    style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                            +
                                        </button>
                                    </div>
                                </div>

                                <div align="right" class="col-2">
                                    @{
                                        var totalSum = product != null ? TotalSumOfSelectedProductWithModifiers(product, item)
                                        : TotalSumOfSelectedProductWithModifiers(item.ProductId, item.PositionId ?? Guid.Empty);
                                        var freeItems = OrderModel?.DiscountFreeItems?.Where(id => id == item.PositionId);
                                    }
                                    @if (freeItems != null && freeItems.Any())
                                    {
                                        double discountSum = 0;
                                        foreach (var freeItem in freeItems)
                                        {
                                            discountSum += item.Price ?? 0;
                                        }
                                        <del>₽@totalSum</del>
                                        <p>₽@(totalSum - discountSum)</p>
                                    }
                                    else
                                    {
                                        <p>₽@totalSum</p>
                                    }

                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col">
                                    <img class="img-fluid rounded" src="@ImageLinkByProductId(item.ProductId)" alt="@item.ProductName" />
                                </div>
                                <div class="col-6">
                                    <p>@item.ProductName @sizeName</p>
                                    <div style="display: flex;">
                                        <button @onclick="(e => RemoveProductItemInShoppingCartPageAsync(item.ProductId, item.PositionId))" data-toggle="modal" data-target="#productModal" class="btn btn-light"
                                            style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                            -
                                        </button>
                                        <p style="padding-left:10px;padding-right:10px;margin-bottom:0;margin-top:3%;">@(item.Amount) шт</p>
                                        <button @onclick="(e => AddProductItemInShoppingCartPageAsync(item.ProductId, item.PositionId))" data-toggle="modal" data-target="#productModal" class="btn btn-light"
                                            style="box-shadow:none;width:35px;border-radius:50%;background-color: #F5F4F2;">
                                            +
                                        </button>
                                    </div>
                                </div>

                                <div align="right" class="col-2">
                                    @{
                                        var freeItems = OrderModel?.DiscountFreeItems?.Where(id => id == item.PositionId);
                                    }

                                    @if (freeItems != null && freeItems.Any())
                                    {
                                        double discountSum = 0;
                                        foreach (var freeItem in freeItems)
                                        {
                                            discountSum += item.Price ?? 0;
                                        }
                                        <del>₽@(item.Price * item.Amount)</del>
                                        <p>₽@(item.Price * item.Amount - discountSum)</p>
                                    }
                                    else
                                    {
                                        <p>₽@(item.Price * item.Amount)</p>
                                    }
                                </div>
                            </div>
                        }
                    }
                }
                @if (OrderModel.FreeItems != null)
                {
                    foreach (var item in OrderModel.FreeItems)
                    {
                        <hr style="color:lightgrey;" />
                        <div class="row">
                            <div class="col">
                                <img class="img-fluid rounded" src="@ImageLinkByProductId(item.ProductId)" alt="@item.ProductName" />
                            </div>
                            <div class="col-6">
                                <p>@item.ProductName</p>
                            </div>
                            <div align="right" class="col-2">
                                <p>🎁</p>
                            </div>
                        </div>
                    }
                }

            </div>
            <br />

            @if (OrderModel.DiscountSum > 0)
            {

                var discountProcent = OrderModel.DiscountProcent;
                bool isInteger = (int)(discountProcent * 100 % 100) == 0;
                <h5 style="margin-top:5px;">Скидка: -@string.Format(isInteger ? "{0:F0}" : "{0:F2}", OrderModel.DiscountProcent)%</h5>

                <div class="row mb-2">
                    <div class="col">
                        <h5>Итого:</h5>
                    </div>
                    <div class="col" style="flex:0 0 auto;width:80%;">
                        <h6 align="left" style="padding-top:5px;"><del>₽@OrderModel.TotalSum</del></h6>
                        <h6 align="left">₽@(OrderModel.FinalSum)</h6>
                    </div>
                </div>
            }
            @if (WebAppInfo.UseCoupon)
            {
                <div class="row" style="padding-bottom:5px;">
                        <div class="col">
                        <input class="comment" type="text" name="Coupon" placeholder="Введите промокод" @bind="@CouponValue" />
                    </div>
                    <div class="col">
                        <button @onclick="CalculateLoyaltyProgramByCouponAsync" class="btn btn-light TlBlrCouponApply" style="box-shadow:none;background-color:#F5F4F2;height:100%;">
                            <span>Применить</span>
                        </button>
                    </div>
                </div>
            }

            if (OrderModel.WalletSum > 0)
            {
                <h5>Бонусные баллы</h5>
                <h6>У Вас накоплено @(OrderModel.WalletSum) баллов</h6>
                <div class="row">
                    <div class="col-6" style="position:relative;">
                        <input type="range" class="form-range" style="margin:0;position:absolute;top:50%;left:50%;margin-right:-50%;transform:translate(-50%,-50%);
    padding-left:10px;padding-right:10px;"
                        min="0" max="@(OrderModel.AllowedWalletSum)" id="customRangeForWalletBalance" value="@OrderModel.SelectedBonusSum"
                            @oninput="OnChangeAllowedBonusSum">
                    </div>
                    <div class="col-2" style="position:relative;">
                        <h5 style="margin:0;position:absolute;top:50%;left:50%;margin-right:-50%;transform:translate(-50%,-50%);">@(OrderModel.SelectedBonusSum)</h5>
                    </div>
                    <div class="col-4">
                        @if (!ConfirmDiscountBonus)
                        {
                            <button @onclick="(e => ConfirmDiscountBonus = true)" class="btn btn-light TlBlrCouponApply" style="box-shadow:none;background-color:#F5F4F2;height:100%;">
                                <span>Применить</span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-light TlBlrCouponApply" style="box-shadow:none;background-color:#F5F4F2;height:100%;" disabled>
                                <span>Применено</span>
                            </button>
                        }
                    </div>
                </div>
            }

            <div>
                <h5>Способ доставки</h5>
            </div>
            @if (OrderModel.ByCourier)
            {
                <div class="btn-group" role="group" aria-label="Delivery type">
                    <button type="button" @onclick="(e => ChangeDeliveryTypeFlagAsync(true))" data-toggle="modal" data-target="#productModal" class="btn btn-success disabled">Доставка</button>
                    <button type="button" @onclick="(e => ChangeDeliveryTypeFlagAsync(false))" data-toggle="modal" data-target="#productModal" class="btn btn-secondary"
                        style="background-color:#c2c9cf;border-color: #c2c9cf;">Самовывоз</button>
                </div>
                <input class="comment" type="text" name="City" placeholder="Город" value="@CityValue" @oninput="(e => { var res = e.Value.ToString(); CityValue = res is null ? CityValue : res; })"/>
                <input class="comment" type="text" name="Street" placeholder="Улица" value="@StreetValue"
                @oninput="(e => { var res = e.Value.ToString(); StreetValue = res is null ? StreetValue : res; })" />
                <div style="display: flex;">
                    <input class="comment" style="width:49%;" type="text" name="House" placeholder="Дом" value="@HouseValue"
                    @oninput="(e => { var res = e.Value.ToString(); HouseValue = res is null ? HouseValue : res; })" />
                    <input class="comment" style="width:49%;margin-left:auto;margin-right:0em;" type="text" name="Flat" placeholder="Квартира" value="@FlatValue"
                    @oninput="(e => { var res = e.Value.ToString(); FlatValue = res is null ? FlatValue : res; })" />
                </div>
                <div style="display: flex;">
                    <input class="comment" style="width:49%;" type="text" name="Entrance" placeholder="Подъезд" value="@EntranceValue"
                    @oninput="(e => { var res = e.Value.ToString(); EntranceValue = res is null ? EntranceValue : res; })"/>
                    <input class="comment" style="width:49%;margin-left:auto;margin-right:0em;" type="text" name="Floor" placeholder="Этаж" value="@FloorValue"
                    @oninput="(e => { var res = e.Value.ToString(); FloorValue = res is null ? FloorValue : res; })" />
                </div>
            }
            else
            {
                <div class="btn-group" role="group" aria-label="Delivery type">
                    <button @onclick="(e => ChangeDeliveryTypeFlagAsync(true))" data-toggle="modal" data-target="#productModal" class="btn btn-secondary"
                        style="background-color:#c2c9cf;border-color: #c2c9cf;">
                        Доставка
                    </button>
                    <button @onclick="(e => ChangeDeliveryTypeFlagAsync(false))" data-toggle="modal" data-target="#productModal" class="btn btn-success disabled">Самовывоз</button>
                </div>
                <div style="margin-top:10px;">
                    <select class="form-select" style="box-shadow:none;" aria-label="Default select example" @onchange="@OnSelectTerminalAsync">
                    @{
                        var delTerminal = OrderModel.DeliveryTerminal;
                    }
                    @if (delTerminal != null)
                    {
                        <option id="@delTerminal.Id" selected>@(delTerminal.Name)</option>
                    }
                    else if (OrderModel.TerminalId != null && OrderModel.TerminalId != Guid.Empty)
                    {
                        delTerminal = DeliveryTerminals?.FirstOrDefault(x => x.Id == OrderModel.TerminalId);
                        if (delTerminal != null)
                        {
                            <option id="@delTerminal.Id" selected>@(delTerminal.Name)</option>
                        }
                        else
                        {
                            <option selected>Выберите улицу</option>
                        }
                    }
                    else
                    {
                        <option selected>Выберите улицу</option>
                    }
                    @if (DeliveryTerminals is not null)
                    {
                        foreach (var terminal in DeliveryTerminals)
                        {
                            <option value="@terminal.Id">@terminal.Name</option>
                        }
                    }
                    </select>
                </div>
            }

            @*Comment field*@
            <input class="comment" type="text" name="Comment" placeholder="Ваш комментарий..." @bind="@CommentValue"/>

            <div>
                <br/>
                @if (IsTestMode)
                {
                    <central>
                        @*The button for to pay the created order if the page isn't going to open in the Telegram app*@
                        @if (OrderModel.TotalSum < 70)
                        {
                            <button data-toggle="modal" data-target="#productModal" class="btn btn-success" disabled>Pay ₽@(OrderModel.TotalSum)</button>
                        }
                        else
                        {
                            var sum = OrderModel.TotalSum - OrderModel.DiscountSum;
                            <button @onclick="(e => PayOrderForTestAsync())" data-toggle="modal" data-target="#productModal" class="btn btn-success">Оплатить ₽@(sum)</button>
                        }
                    </central>
                }
            </div>
        }
        // Page to show information about the created order
        else if (RazorOrderInfo.OrderStatusType == OrderStatusType.OrderCreated && IsTestMode)
        {
            <p>@InfoAboutCreatedOrder()</p>
        }
    }
}
else {
    <div class=container4>
        <div class="dots-bars-2"></div>
    </div>
}

@code {
    //
    private IOrderService? OrderService { get; set; }
    //
    private ITwaNet? TwaNet { get; set; }
    //
    private IJsHelperService? JsHelperService { get; set; }
    //
    private StateOfPage? StateOfPage { get; set; }
    //
    private long TestChatId { get; } = 2098619539;
    //
    private bool IsLoadedGeneralInfo { get; set; } = false;


    // +
    protected override async Task OnInitializedAsync()
    {
        StateOfPage = new StateOfPage();

        try
        {
            TwaNet = new TwaNet(JsRuntime);
            var chatId = TwaNet.ChatId;
            OrderService = new OrderService(Http, chatId, OrderControllerPaths.RetrieveMainInfoForWebAppOrder);
            await TwaNet.SetMainBtnColorAsync(OrderService.TlgMainBtnColor);

            // !!! Initialize and run it block after render page !!!
            StateHasChanged();
            if (OrderService.HaveSelectedProductsAtFirst())
            {
                var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                await TwaNet.SetMainButtonTextAsync(btnText);
            }
            await ListenTwaBtnsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            // !!! Check error message for test chat ID !!!
            if (ex.Message.Contains("Cannot wait on monitors on this runtime"))
            {
                try
                {
                    OrderService = new OrderService(Http, TestChatId, OrderControllerPaths.RetrieveMainInfoForWebAppOrder);
                    return;
                }
                catch (Exception iex)
                {
                    Console.WriteLine(iex.Message);
                }
            }
            StateOfPage.SetErrorStateForWebApp();
        }
        finally
        {
            IsLoadedGeneralInfo = true;
        }
    }

    // Select group +
    private async Task AddCurrentGroupId(Guid id)
    {
        if (StateOfPage!.IsPageBlocked) return;

        try
        {
            OrderService!.CurrentGroupId = id;
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            StateOfPage.SetErrorStateForWebApp();
        }
    }

    // Add product in the main menu +
    private async Task AddProductItemInSelectingProductPageAsync(Guid productId)
    {       
        try
        {        
            if (StateOfPage!.IsPageBlocked) return;
            await TwaNet!.SetHapticFeedbackSelectionChangedAsync();

            var productInfo = await OrderService!.AddProductItemInSelectingProductPageAsync(productId);
            if (OrderService.IsReleaseMode)
            {
                if (productInfo.GeneralProductInfo.HaveModifiers() || productInfo.GeneralProductInfo.HaveSizesMoreThanOne())
                {
                    StateOfPage.GoToPage(PageTypeOfOrder.SelectingModifiersAndAmountsForProduct);
                    var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingModifiersAndAmountsForProduct;
                    btnText = string.Format(btnText, productInfo.TotalSumOfSelectedProductWithModifiers());
                    await TwaNet.SetMainButtonTextAsync(btnText);
                    await TwaNet.ShowBackButtonAsync();
                }
                else if (productInfo.IsFirstSelected)
                {
                    var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(btnText);
                }
            }
            else StateOfPage.GoToPage(PageTypeOfOrder.SelectingModifiersAndAmountsForProduct);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Remove product in the main menu +
    private async Task RemoveProductItemInSelectingProductPageAsync(Guid productId)
    {
        try
        {
            if (StateOfPage!.IsPageBlocked) return;

            var product = OrderService!.DeliveryGeneralInfo.ProductById(productId, OrderService.CurrentGroupId);

            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();

                if (product.HaveModifiersOrSizesMoreThanOne())
                {
                    if ((await OrderService.RemoveProductItemWithModifiersInSelectingProductPageAsync(product)))
                    {
                        StateOfPage!.GoToPage(PageTypeOfOrder.ChangingSelectedProductsWithModifiers);
                        var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().ChangingSelectedProductsWithModifiers;
                        await TwaNet!.ShowBackButtonAsync();
                        await TwaNet!.SetMainButtonTextAsync(btnText);
                    }
                }
                else
                {
                    await OrderService!.RemoveProductItemInSelectingProductPageAsync(product);                    
                    if (OrderService.OrderInfo.HaveSelectedProducts())
                        await TwaNet!.HideMainButtonAsync();
                }
            }
            else
            {
                if (product.HaveModifiersOrSizesMoreThanOne())
                {
                    if ((await OrderService.RemoveProductItemWithModifiersInSelectingProductPageAsync(product)))
                        StateOfPage!.GoToPage(PageTypeOfOrder.ChangingSelectedProductsWithModifiers);
                }
                else
                {
                    await OrderService!.RemoveProductItemInSelectingProductPageAsync(product);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Increase an amount of product by ID in the shopping cart +
    private async Task AddProductItemInShoppingCartPageAsync(Guid productId, Guid? positionId = null)
    {
        try
        {
            if (StateOfPage!.IsPageBlocked) return;

            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
                await TwaNet!.ShowProgressAsync();

                await OrderService!.AddProductItemInShoppingCartPageAsync(TwaNet!, productId, positionId);

                var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().ShoppingCart;
                btnText = string.Format(btnText, OrderService!.FinalSumOfOrder());
                await TwaNet!.HideProgressAsync();
                await TwaNet!.SetMainButtonTextAsync(btnText);
            }
            else await OrderService!.AddProductItemInShoppingCartPageAsync(productId, positionId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Decrease an amount of product by ID in the shopping cart +
    private async Task RemoveProductItemInShoppingCartPageAsync(Guid productId, Guid? positionId = null)
    {
        try
        {
            if (StateOfPage!.IsPageBlocked) return;

            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
                await TwaNet!.ShowProgressAsync();

                if ((await OrderService!.RemoveProductItemInShoppingCartPageAsync(TwaNet!, productId, positionId)) is not null)
                {
                    if (OrderService!.IsReleaseMode)
                    {
                        var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().ShoppingCart;
                        btnText = string.Format(btnText, OrderService!.FinalSumOfOrder());
                        await TwaNet!.HideProgressAsync();
                        await TwaNet!.SetMainButtonTextAsync(btnText);
                    }
                }
                else
                {
                    StateOfPage.GoBack();
                    await TwaNet!.HideProgressAsync();
                    await TwaNet!.HideBackButtonAsync();
                    await TwaNet!.HideMainButtonAsync();
                }
            }
            else if ((await OrderService!.RemoveProductItemInShoppingCartPageAsync(productId, positionId)) is null)
            {
                StateOfPage.GoBack();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Increase an amount of product with modifiers by ID +
    private async Task AddProductItemInChangingSelectedProductsWithModifiersPageAsync(Guid productId, Guid positionId)
    {
        try
        {
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
            }

            await OrderService!.AddProductItemInChangingSelectedProductsWithModifiersPageAsync(productId, positionId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Decrease an amount of product with modifiers by ID +
    private async Task RemoveProductItemInChangingSelectedProductsWithModifiersPageAsync(Guid productId, Guid positionId)
    {
        try
        {
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();

                if ((await OrderService!.RemoveProductItemInChangingSelectedProductsWithModifiersPageAsync(productId, positionId)) is null)
                {
                    if (!OrderService.OrderInfo.CurrItems().Where(x => x.ProductId == productId).Any())
                    {
                        StateOfPage!.GoBack();
                        await TwaNet.HideBackButtonAsync();

                        if (OrderService.OrderInfo.HaveSelectedProducts())
                        {
                            var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                            await TwaNet.SetMainButtonTextAsync(btnText);
                        }
                        else
                        {
                            await TwaNet.HideMainButtonAsync();
                        }
                    }
                }
            }
            else
            {
                if ((await OrderService!.RemoveProductItemInChangingSelectedProductsWithModifiersPageAsync(productId, positionId)) is null)
                {
                    if (!OrderService.OrderInfo.CurrItems().Where(x => x.ProductId == productId).Any())
                    {
                        StateOfPage!.GoBack();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Add a modifier to product by id +
    private async Task AddModifierInSelectingModifiersAndAmountsForProductPageAsync(Guid productId, Guid modifierId, Guid positionId, Guid? modifierGroupId = null)
    {
        try
        {
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
                var item = OrderService!.AddModifierInSelectingModifiersAndAmountsForProductPageAsync(productId, modifierId, positionId, modifierGroupId);
                var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingModifiersAndAmountsForProduct;
                btnText = string.Format(btnText, item.TotalPrice);
                await TwaNet!.SetMainButtonTextAsync(btnText);
            }
            else
            {
                OrderService!.AddModifierInSelectingModifiersAndAmountsForProductPageAsync(productId, modifierId, positionId, modifierGroupId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Remove a modifier from product by id +
    private async Task RemoveModifierInSelectingModifiersAndAmountsForProductPageAsync(Guid productId, Guid modifierId, Guid positionId, Guid? modifierGroupId = null)
    {
        try
        {
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
                var item = OrderService!.RemoveModifierInSelectingModifiersAndAmountsForProductPageAsync(productId, modifierId, positionId, modifierGroupId);
                var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingModifiersAndAmountsForProduct;
                btnText = string.Format(btnText, item.TotalPrice);
                await TwaNet!.SetMainButtonTextAsync(btnText);
            }
            else
            {
                OrderService!.RemoveModifierInSelectingModifiersAndAmountsForProductPageAsync(productId, modifierId, positionId, modifierGroupId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Add product in the modifier menu +
    private async Task AddProductInSelectingModifiersAndAmountsForProductPageAsync(Guid productId, Guid positionId)
    {
        try
        {
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
                var item = OrderService.AddProductInSelectingModifiersAndAmountsForProductPageAsync(productId, positionId);
                var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingModifiersAndAmountsForProduct;
                btnText = string.Format(btnText, item.TotalPrice);
                await TwaNet!.SetMainButtonTextAsync(btnText);
            }
            else
            {
                OrderService.AddProductInSelectingModifiersAndAmountsForProductPageAsync(productId, positionId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Remove product in the modifier menu +
    private async Task RemoveProductInSelectingModifiersAndAmountsForProductPageAsync(Guid productId, Guid positionId)
    {
        try
        {
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
                var item = OrderService.RemoveProductInSelectingModifiersAndAmountsForProductPageAsync(productId, positionId);
                if (item is null)
                {
                    StateOfPage!.GoBack();
                    if (OrderService.OrderInfo.HaveSelectedProducts())
                    {
                        var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                        await TwaNet.SetMainButtonTextAsync(btnText);
                    }
                    else
                    {
                        await TwaNet.HideMainButtonAsync();
                    }
                    await TwaNet.HideBackButtonAsync();
                }
                else
                {
                    var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingModifiersAndAmountsForProduct;
                    btnText = string.Format(btnText, item.TotalPrice);
                    await TwaNet!.SetMainButtonTextAsync(btnText);
                }
            }
            else
            {
                OrderService.RemoveProductInSelectingModifiersAndAmountsForProductPageAsync(productId, positionId);
                if (OrderService.RemoveProductInSelectingModifiersAndAmountsForProductPageAsync(productId, positionId) is null)
                {
                    StateOfPage!.GoBack();
                }
            }
            await OrderService.SendChangedOrderModelToServerAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // +
    public async Task AddProductWithoutModifiersForSelectingAmountsForProductsPageAsync(Guid productId)
    {
        try
        {
            if (OrderService!.IsReleaseMode)
            {
                StateOfPage!.GoToPage(PageTypeOfOrder.SelectingAmountsForProducts);
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
                var res = OrderService.AddProductWithoutModifiersForSelectingAmountsForProductsPageAsync(productId);
                var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingAmountsForProducts;
                btnText = string.Format(btnText, res.Item.TotalPrice);
                await TwaNet!.SetMainButtonTextAsync(btnText);
                await TwaNet.ShowBackButtonAsync();
            }
            else
            {
                OrderService.AddProductWithoutModifiersForSelectingAmountsForProductsPageAsync(productId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Add product +
    private async Task AddProductForOtherMenuAsync(Guid productId)
    {
        try
        {
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
                var res = OrderService.AddProductWithoutModifiersInSelectingAmountsForProductsPageAsync(productId);
                var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingAmountsForProducts;
                btnText = string.Format(btnText, res.Item.TotalPrice);
                await TwaNet!.SetMainButtonTextAsync(btnText);
            }
            else
            {
                OrderService.AddProductWithoutModifiersInSelectingAmountsForProductsPageAsync(productId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Remove product +
    private async Task RemoveProductInOtherMenuAsync(Guid productId)
    {
        try
        {
            if (OrderService!.IsReleaseMode)
            {
                await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
                var res = OrderService.RemoveProductWithoutModifiersInSelectingAmountsForProductsPageAsync(productId);

                if (res is null)
                {
                    StateOfPage!.GoBack();
                    if (OrderService.OrderInfo.HaveSelectedProducts())
                    {
                        var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                        await TwaNet!.SetMainButtonTextAsync(btnText);
                    }
                    else
                    {
                        await TwaNet.HideMainButtonAsync();
                    }
                    await TwaNet.HideBackButtonAsync();
                }
                else
                {
                    var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingAmountsForProducts;
                    btnText = string.Format(btnText, res.Item.TotalPrice);
                    await TwaNet!.SetMainButtonTextAsync(btnText);
                }
            }
            else
            {
                if (OrderService.RemoveProductWithoutModifiersInSelectingAmountsForProductsPageAsync(productId) is null)
                {
                    StateOfPage!.GoBack();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Set the order to view status (use only in web mode) +
    private async Task ViewOrderOfTestMode()
    {
        try
        {
            StateOfPage!.GoToPage(PageTypeOfOrder.ShoppingCart);
            await OrderService!.CalculateLoayltyProgramAndAllowedSumAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Tracking the click of the main telegram button +
    private async Task TelegramHandlerMainButtonAsync()
    {
        Console.WriteLine(typeof(Index).FullName!, nameof(TelegramHandlerMainButtonAsync), "Listening the TelegramBot main button");

        while (true)
        {
            StateOfPage!.IsPageBlocked = false;

            try
            {
                await TwaNet!.ListenMainButtonAsync();
                await TwaNet.SetHapticFeedbackImpactOccurredAsync(HapticFeedbackImpactOccurredType.light);

                if (StateOfPage!.PageTypeOfOrder == PageTypeOfOrder.SelectingProducts)
                {
                    if (OrderService!.DeliveryGeneralInfo.UseIikoBizProgram)
                    {
                        if (!(await OrderService.CalculateLoyaltyProgramAndAllowedSumAndCheckAvailableMinSumForPayAsync(TwaNet))) continue;
                    }
                    else
                    {
                        if (!(await OrderService!.CheckAvailableMinSumForPayAsync(TwaNet))) continue;
                    }

                    StateOfPage.GoToPage(PageTypeOfOrder.ShoppingCart);
                    StateHasChanged();

                    await JsHelperService!.ScrollToTopAsync();
                    await TwaNet.ShowBackButtonAsync();
                    var btnTxt = string.Format(OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().ShoppingCart, OrderService.OrderInfo.FinalSum);
                    await TwaNet.SetMainButtonTextAsync(btnTxt);
                }
                else if (StateOfPage!.PageTypeOfOrder == PageTypeOfOrder.SelectingModifiersAndAmountsForProduct)
                {
                    if (!OrderService!.CheckSelectingModifiersInSelectingModifiersAndAmountsForProductPageAsync())
                    {
                        var popupMsg = OrderService.DeliveryGeneralInfo.GetTlgWebAppPopupMessages().IncorrectSelectedModifier ?? throw new InfoException(typeof(OrderService).FullName!,
                            nameof(TelegramHandlerMainButtonAsync), nameof(Exception), $"{typeof(TlgWebAppPopupMessages).FullName!}." +
                            $"{nameof(TlgWebAppPopupMessages.IncorrectSelectedModifier)}", ExceptionType.Null);

                        await TwaNet.ShowOkPopupMessageAsync(popupMsg.Title, popupMsg.Title, HapticFeedBackNotificationType.warning);
                        continue;
                    }

                    StateOfPage.GoBack();
                    StateHasChanged();

                    var btnText = OrderService!.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(btnText);
                    await TwaNet.HideBackButtonAsync();

                    await OrderService!.SendChangedOrderModelToServerAsync();
                }
                else if (StateOfPage!.PageTypeOfOrder == PageTypeOfOrder.SelectingAmountsForProducts)
                {
                    StateOfPage.GoBack();
                    StateHasChanged();

                    await TwaNet.HideBackButtonAsync();
                    var btnText = OrderService!.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(btnText);
                    await OrderService!.SendChangedOrderModelToServerAsync();
                }
                else if (StateOfPage!.PageTypeOfOrder == PageTypeOfOrder.ChangingSelectedProductsWithModifiers)
                {
                    StateOfPage.GoBack();
                    StateHasChanged();

                    await TwaNet.HideBackButtonAsync();
                    var btnText = OrderService!.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(btnText);
                    await OrderService!.SendChangedOrderModelToServerAsync();
                }
                else if (StateOfPage!.PageTypeOfOrder == PageTypeOfOrder.ShoppingCart)
                {
                    StateOfPage!.IsPageBlocked = true;
                    await TwaNet!.ShowProgressAsync();

                    if (!(await OrderService!.IsNecessaryDataOfOrderCorrect(TwaNet)))
                    {
                        await TwaNet!.HideProgressAsync();
                        continue;
                    }

                    if ((await OrderService.IsWalletBalanceChangedInIikoCardAsync()))
                    {
                        await TwaNet!.HideProgressAsync();
                        var btnTxt = OrderService.DeliveryGeneralInfo.GetTlgWebAppPopupMessages().WalletBalanceChangedInIikoBiz
                            ?? throw new InfoException(typeof(OrderService).FullName!, nameof(TelegramHandlerMainButtonAsync), nameof(Exception),
                            $"{typeof(TlgWebAppPopupMessages).FullName!}.{nameof(TlgWebAppPopupMessages.WalletBalanceChangedInIikoBiz)}", ExceptionType.Null);
                        await TwaNet.ShowOkPopupMessageAsync(btnTxt.Title, btnTxt.Description, HapticFeedBackNotificationType.warning);
                        continue;
                    }

                    // Save changed order info by using CreateInvoiceLinkAsync method
                    await OrderService!.SendChangedOrderModelToServerAsync();
                    await OrderService!.CreateInvoiceLinkAsync(TwaNet);
                    await TwaNet!.HideProgressAsync();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);

                // !!! Ask the user abount to close web app or left it !!!
                await TryToCloseWebAppAsync();
            }
        }
    }

    // Tracking the click of the back telegram button +
    private async Task TelegramHandlerBackButtonAsync()
    {
        // Wait a callback from the telegram
        Console.WriteLine(typeof(Index).FullName!, nameof(TelegramHandlerBackButtonAsync), "Listening the TelegramBot back button");

        while (true)
        {
            try
            {
                await TwaNet!.ListenBackButtonAsync();
                await TwaNet.SetHapticFeedbackImpactOccurredAsync(HapticFeedbackImpactOccurredType.light);

                if (StateOfPage!.IsPageBlocked)
                {
                    continue;
                }
                else if (StateOfPage.PageTypeOfOrder == PageTypeOfOrder.SelectingModifiersAndAmountsForProduct)
                {
                    OrderService!.CancelCurrSelectedItemWithModifiers();

                    StateOfPage.GoBack();
                    StateHasChanged();

                    if (OrderService.OrderInfo.HaveSelectedProducts())
                    {
                        var btnText = OrderService!.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                        await TwaNet.SetMainButtonTextAsync(btnText);
                    }
                    else await TwaNet.HideMainButtonAsync();
                    await TwaNet.HideBackButtonAsync();
                }
                else if (StateOfPage.PageTypeOfOrder == PageTypeOfOrder.SelectingAmountsForProducts)
                {
                    StateOfPage.GoBack();
                    StateHasChanged();

                    var btnText = OrderService!.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(btnText);
                    await TwaNet.HideBackButtonAsync();
                }
                else if (StateOfPage.PageTypeOfOrder == PageTypeOfOrder.ChangingSelectedProductsWithModifiers)
                {
                    StateOfPage.GoBack();
                    StateHasChanged();

                    var btnText = OrderService!.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(btnText);
                    await TwaNet.HideBackButtonAsync();
                }
                else if (StateOfPage.PageTypeOfOrder == PageTypeOfOrder.ShoppingCart)
                {
                    StateOfPage.GoBack();
                    StateHasChanged();

                    var btnText = OrderService!.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                    await TwaNet.SetMainButtonTextAsync(btnText);
                    await TwaNet.HideBackButtonAsync();
                    await OrderService!.SendChangedOrderModelToServerAsync();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);

                // !!! Ask the user abount to close web app or left it !!!
                await TryToCloseWebAppAsync();
            }
        }
    }

    // +
    private async Task TryToCloseWebAppAsync()
    {
        try
        {
            await TwaNet!.CloseWebAppAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            StateOfPage!.SetErrorStateForWebApp();
        }
    }

    // Pay the completed order (use only in web mode) +
    private async Task PayOrderForTestAsync()
    {
        try
        {
            await OrderService!.CreateInvoiceUrlLinkAsync();
            StateOfPage!.GoToPage(PageTypeOfOrder.InfoAboutCreatedOrder);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Listen handler events of JS (***Testing mode***) +
    async Task ListenTwaBtnsAsync()
    {
        try
        {
            Console.WriteLine(typeof(Index).FullName!, nameof(ListenTwaBtnsAsync), "Listening the main button of the TelegramBot");
            // Call handler to catch the click of telegram button
            var mainButtonTask = TelegramHandlerMainButtonAsync();
            var backButtonTask = TelegramHandlerBackButtonAsync();
            await mainButtonTask;
            await backButtonTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            StateOfPage!.SetErrorStateForWebApp();
        }
    }

    // Receive terminal id from html form (beta) +
    private async Task OnSelectTerminalAsync(ChangeEventArgs e)
    {
        try
        {
            var arg = Convert.ToString(e.Value);
            if (!string.IsNullOrEmpty(arg))
            {
                var id = Guid.Parse(arg);
                if (OrderService!.IsReleaseMode)
                {
                    await OrderService!.SetPickupTerminalAsync(TwaNet!, id);

                    var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().ShoppingCart;
                    btnText = string.Format(btnText, OrderService!.FinalSumOfOrder());
                    await TwaNet!.SetMainButtonTextAsync(btnText);
                }
                else await OrderService!.SetPickupTerminalAsync(id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Calculate discount program +
    private async Task CalculateLoyaltyProgramByCouponAsync()
    {
        if (OrderService!.IsReleaseMode)
        {
            await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
            await OrderService.CalculateLoayltyProgramAndAllowedSumAsync(TwaNet);

            var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().ShoppingCart;
            btnText = string.Format(btnText, OrderService!.FinalSumOfOrder());
            await TwaNet!.SetMainButtonTextAsync(btnText);
        }
        else  await OrderService.CalculateLoayltyProgramAndAllowedSumAsync();
    }

    // +
    private async Task ChangeDeliveryTypeFlagAsync(bool byCourier)
    {
        OrderService!.OrderInfo.ByCourier = byCourier;
        if (OrderService!.IsReleaseMode)
        {
            await TwaNet!.SetHapticFeedbackSelectionChangedAsync();
            await OrderService.CalculateLoayltyProgramAndAllowedSumAsync(TwaNet);

            var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().ShoppingCart;
            btnText = string.Format(btnText, OrderService!.FinalSumOfOrder());
            await TwaNet!.SetMainButtonTextAsync(btnText);
        }
        else await OrderService.CalculateLoayltyProgramAndAllowedSumAsync();
    }

    // Remove all selected products in the shopping cart +
    private async Task RemoveAllSelectedProductsInShoppingCartAsync()
    {
        try
        {
            if (OrderService!.IsReleaseMode)
            {
                var popupMsg = OrderService.DeliveryGeneralInfo.GetTlgWebAppPopupMessages().EmptyShoppingCart ?? throw new InfoException(typeof(Index).FullName!,
                    nameof(RemoveAllSelectedProductsInShoppingCartAsync), nameof(Exception), $"{typeof(TlgWebAppPopupMessages).FullName!}." +
                    $"{nameof(TlgWebAppPopupMessages.EmptyShoppingCart)}", ExceptionType.Null);

                const string yes = "0";
                const string no = "1";

                var popupPrms = new PopupParams(popupMsg.Title, popupMsg.Description, new List<PopupButton>
                {
                    new PopupButton(yes, "Да", PopupButtonType.destructive),
                    new PopupButton(no, "Нет", PopupButtonType.destructive)
                });

                var res = await TwaNet!.ShowPopupParamsAsync(popupPrms, HapticFeedBackNotificationType.warning, HapticFeedbackImpactOccurredType.soft);
                if (res == yes)
                {
                    StateOfPage!.GoBack();
                    await OrderService.RemoveAllSelectedProductsInShoppingCartPageAsync();
                    await TwaNet.HideMainButtonAsync();
                    await TwaNet.HideBackButtonAsync();
                }
            }
            else
            {
                StateOfPage!.GoBack();
                await OrderService.RemoveAllSelectedProductsInShoppingCartPageAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Remove selected products with modifiers by ID +
    private async Task CancelCurrSimilarSelectedItemsWithModifiersAsync(Guid productId)
    {
        try
        {
            if (OrderService!.IsReleaseMode)
            {
                var popupMsg = OrderService.DeliveryGeneralInfo.GetTlgWebAppPopupMessages().EmptyShoppingCart ?? throw new InfoException(typeof(Index).FullName!,
                    nameof(CancelCurrSimilarSelectedItemsWithModifiersAsync), nameof(Exception), $"{typeof(TlgWebAppPopupMessages).FullName!}." +
                    $"{nameof(TlgWebAppPopupMessages.EmptySelectedItemsWithModifiers)}", ExceptionType.Null);

                const string yes = "0";
                const string no = "1";

                var popupPrms = new PopupParams(popupMsg.Title, popupMsg.Description, new List<PopupButton>
                {
                    new PopupButton(yes, "Да", PopupButtonType.destructive),
                    new PopupButton(no, "Нет", PopupButtonType.destructive)
                });

                var res = await TwaNet!.ShowPopupParamsAsync(popupPrms, HapticFeedBackNotificationType.warning, HapticFeedbackImpactOccurredType.soft);
                if (res == yes)
                {
                    StateOfPage!.GoBack();
                    await OrderService.CancelCurrSimilarSelectedItemsWithModifiers();
                    if (OrderService.OrderInfo.HaveSelectedProducts())
                    {
                        var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingProducts;
                        await TwaNet.SetMainButtonTextAsync(btnText);
                    }
                    else
                    {
                        await TwaNet.HideMainButtonAsync();
                    }
                    await TwaNet.HideBackButtonAsync();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // +
    private async Task OnChangingProductSizeAsync(ChangeEventArgs arg)
    {
        if (OrderService!.IsReleaseMode)
        {
            await TwaNet!.SetHapticFeedbackImpactOccurredAsync(HapticFeedbackImpactOccurredType.soft);
        }

        var value = arg.Value?.ToString();
        if (value is not null && Guid.TryParse(value, out Guid sizeId))
        {
            try
            {
                var item = OrderService.ChangeProductSize(sizeId);

                if (OrderService!.IsReleaseMode)
                {
                    var btnText = OrderService.DeliveryGeneralInfo.GetTlgWebAppBtnTxts().SelectingModifiersAndAmountsForProduct;
                    btnText = string.Format(btnText, item.TotalPrice);
                    await TwaNet!.SetMainButtonTextAsync(btnText);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    // +
    private async void OnChangeAllowedBonusSum(ChangeEventArgs arg)
    {
        if (OrderService!.IsReleaseMode)
        {
            await TwaNet!.SetHapticFeedbackImpactOccurredAsync(HapticFeedbackImpactOccurredType.soft);
        }

        var value = arg.Value?.ToString();
        if (value is not null && Int32.TryParse(value, out var walletSum))
        {
            OrderService.OrderInfo.SelectedBonusSum = walletSum;
        }
    }
}